== Physical Plan ==
TakeOrderedAndProject (32)
+- * HashAggregate (31)
   +- Exchange (30)
      +- * HashAggregate (29)
         +- * Project (28)
            +- * BroadcastHashJoin Inner BuildRight (27)
               :- * Project (22)
               :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :- * Project (15)
               :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :- * Project (9)
               :     :     :  +- * BroadcastHashJoin LeftOuter BuildRight (8)
               :     :     :     :- * Filter (3)
               :     :     :     :  +- * ColumnarToRow (2)
               :     :     :     :     +- Scan parquet default.catalog_sales (1)
               :     :     :     +- BroadcastExchange (7)
               :     :     :        +- * Filter (6)
               :     :     :           +- * ColumnarToRow (5)
               :     :     :              +- Scan parquet default.catalog_returns (4)
               :     :     +- BroadcastExchange (13)
               :     :        +- * Filter (12)
               :     :           +- * ColumnarToRow (11)
               :     :              +- Scan parquet default.warehouse (10)
               :     +- BroadcastExchange (20)
               :        +- * Project (19)
               :           +- * Filter (18)
               :              +- * ColumnarToRow (17)
               :                 +- Scan parquet default.item (16)
               +- BroadcastExchange (26)
                  +- * Filter (25)
                     +- * ColumnarToRow (24)
                        +- Scan parquet default.date_dim (23)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_order_number#4, cs_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_order_number#4, cs_sales_price#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_order_number#4, cs_sales_price#5]
Condition : ((isnotnull(cs_warehouse_sk#2) AND isnotnull(cs_item_sk#3)) AND isnotnull(cs_sold_date_sk#1))

(4) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#6, cr_order_number#7, cr_refunded_cash#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [cr_item_sk#6, cr_order_number#7, cr_refunded_cash#8]

(6) Filter [codegen id : 1]
Input [3]: [cr_item_sk#6, cr_order_number#7, cr_refunded_cash#8]
Condition : (isnotnull(cr_order_number#7) AND isnotnull(cr_item_sk#6))

(7) BroadcastExchange
Input [3]: [cr_item_sk#6, cr_order_number#7, cr_refunded_cash#8]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [2]: [cs_order_number#4, cs_item_sk#3]
Right keys [2]: [cr_order_number#7, cr_item_sk#6]
Join condition: None

(9) Project [codegen id : 5]
Output [5]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_sales_price#5, cr_refunded_cash#8]
Input [8]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_order_number#4, cs_sales_price#5, cr_item_sk#6, cr_order_number#7, cr_refunded_cash#8]

(10) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#10, w_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_state:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#10, w_state#11]

(12) Filter [codegen id : 2]
Input [2]: [w_warehouse_sk#10, w_state#11]
Condition : isnotnull(w_warehouse_sk#10)

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#10, w_state#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#10]
Join condition: None

(15) Project [codegen id : 5]
Output [5]: [cs_sold_date_sk#1, cs_item_sk#3, cs_sales_price#5, cr_refunded_cash#8, w_state#11]
Input [7]: [cs_sold_date_sk#1, cs_warehouse_sk#2, cs_item_sk#3, cs_sales_price#5, cr_refunded_cash#8, w_warehouse_sk#10, w_state#11]

(16) Scan parquet default.item
Output [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(17) ColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]

(18) Filter [codegen id : 3]
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Condition : (((isnotnull(i_current_price#15) AND (i_current_price#15 >= 0.99)) AND (i_current_price#15 <= 1.49)) AND isnotnull(i_item_sk#13))

(19) Project [codegen id : 3]
Output [2]: [i_item_sk#13, i_item_id#14]
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]

(20) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#13]
Join condition: None

(22) Project [codegen id : 5]
Output [5]: [cs_sold_date_sk#1, cs_sales_price#5, cr_refunded_cash#8, w_state#11, i_item_id#14]
Input [7]: [cs_sold_date_sk#1, cs_item_sk#3, cs_sales_price#5, cr_refunded_cash#8, w_state#11, i_item_sk#13, i_item_id#14]

(23) Scan parquet default.date_dim
Output [2]: [d_date_sk#17, d_date#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(24) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#17, d_date#18]

(25) Filter [codegen id : 4]
Input [2]: [d_date_sk#17, d_date#18]
Condition : (((isnotnull(d_date#18) AND (d_date#18 >= 10997)) AND (d_date#18 <= 11057)) AND isnotnull(d_date_sk#17))

(26) BroadcastExchange
Input [2]: [d_date_sk#17, d_date#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(27) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#17]
Join condition: None

(28) Project [codegen id : 5]
Output [5]: [cs_sales_price#5, cr_refunded_cash#8, w_state#11, i_item_id#14, d_date#18]
Input [7]: [cs_sold_date_sk#1, cs_sales_price#5, cr_refunded_cash#8, w_state#11, i_item_id#14, d_date_sk#17, d_date#18]

(29) HashAggregate [codegen id : 5]
Input [5]: [cs_sales_price#5, cr_refunded_cash#8, w_state#11, i_item_id#14, d_date#18]
Keys [2]: [w_state#11, i_item_id#14]
Functions [2]: [partial_sum(CASE WHEN (d_date#18 < 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#18 >= 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)]
Aggregate Attributes [4]: [sum#20, isEmpty#21, sum#22, isEmpty#23]
Results [6]: [w_state#11, i_item_id#14, sum#24, isEmpty#25, sum#26, isEmpty#27]

(30) Exchange
Input [6]: [w_state#11, i_item_id#14, sum#24, isEmpty#25, sum#26, isEmpty#27]
Arguments: hashpartitioning(w_state#11, i_item_id#14, 5), true, [id=#28]

(31) HashAggregate [codegen id : 6]
Input [6]: [w_state#11, i_item_id#14, sum#24, isEmpty#25, sum#26, isEmpty#27]
Keys [2]: [w_state#11, i_item_id#14]
Functions [2]: [sum(CASE WHEN (d_date#18 < 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), sum(CASE WHEN (d_date#18 >= 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)]
Aggregate Attributes [2]: [sum(CASE WHEN (d_date#18 < 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#29, sum(CASE WHEN (d_date#18 >= 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#30]
Results [4]: [w_state#11, i_item_id#14, sum(CASE WHEN (d_date#18 < 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#29 AS sales_before#31, sum(CASE WHEN (d_date#18 >= 11027) THEN CheckOverflow((promote_precision(cast(cs_sales_price#5 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#8 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#30 AS sales_after#32]

(32) TakeOrderedAndProject
Input [4]: [w_state#11, i_item_id#14, sales_before#31, sales_after#32]
Arguments: 100, [w_state#11 ASC NULLS FIRST, i_item_id#14 ASC NULLS FIRST], [w_state#11, i_item_id#14, sales_before#31, sales_after#32]

