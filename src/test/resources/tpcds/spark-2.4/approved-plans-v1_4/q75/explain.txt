== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[sales_cnt_diff#1 ASC NULLS FIRST], output=[prev_year#2,year#3,i_brand_id#4,i_class_id#5,i_category_id#6,i_manufact_id#7,prev_yr_cnt#8,curr_yr_cnt#9,sales_cnt_diff#1,sales_amt_diff#10])
+- *(34) Project [d_year#11 AS prev_year#2, d_year#12 AS year#3, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#13 AS prev_yr_cnt#8, sales_cnt#14 AS curr_yr_cnt#9, (sales_cnt#14 - sales_cnt#13) AS sales_cnt_diff#1, CheckOverflow((promote_precision(cast(sales_amt#15 as decimal(19,2))) - promote_precision(cast(sales_amt#16 as decimal(19,2)))), DecimalType(19,2)) AS sales_amt_diff#10]
   +- *(34) BroadcastHashJoin [i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7], [i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], Inner, BuildRight, (CheckOverflow((promote_precision(cast(sales_cnt#14 as decimal(17,2))) / promote_precision(cast(sales_cnt#13 as decimal(17,2)))), DecimalType(37,20)) < 0.90000000000000000000)
      :- *(34) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7], functions=[sum(cast(sales_cnt#21 as bigint)), sum(UnscaledValue(sales_amt#22))])
      :  +- Exchange hashpartitioning(d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, 5)
      :     +- *(16) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7], functions=[partial_sum(cast(sales_cnt#21 as bigint)), partial_sum(UnscaledValue(sales_amt#22))])
      :        +- *(16) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22], functions=[])
      :           +- Exchange hashpartitioning(d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22, 5)
      :              +- *(15) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22], functions=[])
      :                 +- Union
      :                    :- *(10) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22], functions=[])
      :                    :  +- Exchange hashpartitioning(d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22, 5)
      :                    :     +- *(9) HashAggregate(keys=[d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, sales_cnt#21, sales_amt#22], functions=[])
      :                    :        +- Union
      :                    :           :- *(4) Project [d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, (cs_quantity#23 - coalesce(cr_return_quantity#24, 0)) AS sales_cnt#21, CheckOverflow((promote_precision(cast(cs_ext_sales_price#25 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#26, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#22]
      :                    :           :  +- *(4) BroadcastHashJoin [cs_order_number#27, cs_item_sk#28], [cr_order_number#29, cr_item_sk#30], LeftOuter, BuildRight
      :                    :           :     :- *(4) Project [cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, d_year#12]
      :                    :           :     :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#31], [d_date_sk#32], Inner, BuildRight
      :                    :           :     :     :- *(4) Project [cs_sold_date_sk#31, cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7]
      :                    :           :     :     :  +- *(4) BroadcastHashJoin [cs_item_sk#28], [i_item_sk#33], Inner, BuildRight
      :                    :           :     :     :     :- *(4) Project [cs_sold_date_sk#31, cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25]
      :                    :           :     :     :     :  +- *(4) Filter (isnotnull(cs_item_sk#28) && isnotnull(cs_sold_date_sk#31))
      :                    :           :     :     :     :     +- *(4) FileScan parquet default.catalog_sales[cs_sold_date_sk#31,cs_item_sk#28,cs_order_number#27,cs_quantity#23,cs_ext_sales_price#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:...
      :                    :           :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                    :           :     :     :        +- *(1) Project [i_item_sk#33, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7]
      :                    :           :     :     :           +- *(1) Filter ((((((isnotnull(i_category#34) && (i_category#34 = Books)) && isnotnull(i_item_sk#33)) && isnotnull(i_category_id#6)) && isnotnull(i_manufact_id#7)) && isnotnull(i_brand_id#4)) && isnotnull(i_class_id#5))
      :                    :           :     :     :              +- *(1) FileScan parquet default.item[i_item_sk#33,i_brand_id#4,i_class_id#5,i_category_id#6,i_category#34,i_manufact_id#7] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_category_id)..., ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact...
      :                    :           :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                    :           :     :        +- *(2) Project [d_date_sk#32, d_year#12]
      :                    :           :     :           +- *(2) Filter ((isnotnull(d_year#12) && (d_year#12 = 2002)) && isnotnull(d_date_sk#32))
      :                    :           :     :              +- *(2) FileScan parquet default.date_dim[d_date_sk#32,d_year#12] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                    :           :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))))
      :                    :           :        +- *(3) Project [cr_item_sk#30, cr_order_number#29, cr_return_quantity#24, cr_return_amount#26]
      :                    :           :           +- *(3) Filter (isnotnull(cr_item_sk#30) && isnotnull(cr_order_number#29))
      :                    :           :              +- *(3) FileScan parquet default.catalog_returns[cr_item_sk#30,cr_order_number#29,cr_return_quantity#24,cr_return_amount#26] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>
      :                    :           +- *(8) Project [d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, (ss_quantity#35 - coalesce(sr_return_quantity#36, 0)) AS sales_cnt#37, CheckOverflow((promote_precision(cast(ss_ext_sales_price#38 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#39, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#40]
      :                    :              +- *(8) BroadcastHashJoin [cast(ss_ticket_number#41 as bigint), cast(ss_item_sk#42 as bigint)], [sr_ticket_number#43, sr_item_sk#44], LeftOuter, BuildRight
      :                    :                 :- *(8) Project [ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, d_year#12]
      :                    :                 :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#45], [d_date_sk#32], Inner, BuildRight
      :                    :                 :     :- *(8) Project [ss_sold_date_sk#45, ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7]
      :                    :                 :     :  +- *(8) BroadcastHashJoin [ss_item_sk#42], [i_item_sk#33], Inner, BuildRight
      :                    :                 :     :     :- *(8) Project [ss_sold_date_sk#45, ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38]
      :                    :                 :     :     :  +- *(8) Filter (isnotnull(ss_item_sk#42) && isnotnull(ss_sold_date_sk#45))
      :                    :                 :     :     :     +- *(8) FileScan parquet default.store_sales[ss_sold_date_sk#45,ss_item_sk#42,ss_ticket_number#41,ss_quantity#35,ss_ext_sales_price#38] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price...
      :                    :                 :     :     +- ReusedExchange [i_item_sk#33, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                    :                 :     +- ReusedExchange [d_date_sk#32, d_year#12], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                    :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
      :                    :                    +- *(7) Project [sr_item_sk#44, sr_ticket_number#43, sr_return_quantity#36, sr_return_amt#39]
      :                    :                       +- *(7) Filter (isnotnull(sr_ticket_number#43) && isnotnull(sr_item_sk#44))
      :                    :                          +- *(7) FileScan parquet default.store_returns[sr_item_sk#44,sr_ticket_number#43,sr_return_quantity#36,sr_return_amt#39] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>
      :                    +- *(14) Project [d_year#12, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, (ws_quantity#46 - coalesce(wr_return_quantity#47, 0)) AS sales_cnt#48, CheckOverflow((promote_precision(cast(ws_ext_sales_price#49 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#50, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#51]
      :                       +- *(14) BroadcastHashJoin [cast(ws_order_number#52 as bigint), cast(ws_item_sk#53 as bigint)], [wr_order_number#54, wr_item_sk#55], LeftOuter, BuildRight
      :                          :- *(14) Project [ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7, d_year#12]
      :                          :  +- *(14) BroadcastHashJoin [ws_sold_date_sk#56], [d_date_sk#32], Inner, BuildRight
      :                          :     :- *(14) Project [ws_sold_date_sk#56, ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7]
      :                          :     :  +- *(14) BroadcastHashJoin [ws_item_sk#53], [i_item_sk#33], Inner, BuildRight
      :                          :     :     :- *(14) Project [ws_sold_date_sk#56, ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49]
      :                          :     :     :  +- *(14) Filter (isnotnull(ws_item_sk#53) && isnotnull(ws_sold_date_sk#56))
      :                          :     :     :     +- *(14) FileScan parquet default.web_sales[ws_sold_date_sk#56,ws_item_sk#53,ws_order_number#52,ws_quantity#46,ws_ext_sales_price#49] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:...
      :                          :     :     +- ReusedExchange [i_item_sk#33, i_brand_id#4, i_class_id#5, i_category_id#6, i_manufact_id#7], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                          :     +- ReusedExchange [d_date_sk#32, d_year#12], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :                          +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
      :                             +- *(13) Project [wr_item_sk#55, wr_order_number#54, wr_return_quantity#47, wr_return_amt#50]
      :                                +- *(13) Filter (isnotnull(wr_item_sk#55) && isnotnull(wr_order_number#54))
      :                                   +- *(13) FileScan parquet default.web_returns[wr_item_sk#55,wr_order_number#54,wr_return_quantity#47,wr_return_amt#50] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true], input[4, int, true]))
         +- *(33) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], functions=[sum(cast(sales_cnt#21 as bigint)), sum(UnscaledValue(sales_amt#22))])
            +- Exchange hashpartitioning(d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, 5)
               +- *(32) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], functions=[partial_sum(cast(sales_cnt#21 as bigint)), partial_sum(UnscaledValue(sales_amt#22))])
                  +- *(32) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22], functions=[])
                     +- Exchange hashpartitioning(d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22, 5)
                        +- *(31) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22], functions=[])
                           +- Union
                              :- *(26) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22], functions=[])
                              :  +- Exchange hashpartitioning(d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22, 5)
                              :     +- *(25) HashAggregate(keys=[d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, sales_cnt#21, sales_amt#22], functions=[])
                              :        +- Union
                              :           :- *(20) Project [d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, (cs_quantity#23 - coalesce(cr_return_quantity#24, 0)) AS sales_cnt#21, CheckOverflow((promote_precision(cast(cs_ext_sales_price#25 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#26, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#22]
                              :           :  +- *(20) BroadcastHashJoin [cs_order_number#27, cs_item_sk#28], [cr_order_number#29, cr_item_sk#30], LeftOuter, BuildRight
                              :           :     :- *(20) Project [cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, d_year#11]
                              :           :     :  +- *(20) BroadcastHashJoin [cs_sold_date_sk#31], [d_date_sk#57], Inner, BuildRight
                              :           :     :     :- *(20) Project [cs_sold_date_sk#31, cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20]
                              :           :     :     :  +- *(20) BroadcastHashJoin [cs_item_sk#28], [i_item_sk#58], Inner, BuildRight
                              :           :     :     :     :- *(20) Project [cs_sold_date_sk#31, cs_item_sk#28, cs_order_number#27, cs_quantity#23, cs_ext_sales_price#25]
                              :           :     :     :     :  +- *(20) Filter (isnotnull(cs_item_sk#28) && isnotnull(cs_sold_date_sk#31))
                              :           :     :     :     :     +- *(20) FileScan parquet default.catalog_sales[cs_sold_date_sk#31,cs_item_sk#28,cs_order_number#27,cs_quantity#23,cs_ext_sales_price#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:...
                              :           :     :     :     +- ReusedExchange [i_item_sk#58, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :           :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :           :     :        +- *(18) Project [d_date_sk#57, d_year#11]
                              :           :     :           +- *(18) Filter ((isnotnull(d_year#11) && (d_year#11 = 2001)) && isnotnull(d_date_sk#57))
                              :           :     :              +- *(18) FileScan parquet default.date_dim[d_date_sk#57,d_year#11] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                              :           :     +- ReusedExchange [cr_item_sk#30, cr_order_number#29, cr_return_quantity#24, cr_return_amount#26], BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))))
                              :           +- *(24) Project [d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, (ss_quantity#35 - coalesce(sr_return_quantity#36, 0)) AS sales_cnt#37, CheckOverflow((promote_precision(cast(ss_ext_sales_price#38 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#39, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#40]
                              :              +- *(24) BroadcastHashJoin [cast(ss_ticket_number#41 as bigint), cast(ss_item_sk#42 as bigint)], [sr_ticket_number#43, sr_item_sk#44], LeftOuter, BuildRight
                              :                 :- *(24) Project [ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, d_year#11]
                              :                 :  +- *(24) BroadcastHashJoin [ss_sold_date_sk#45], [d_date_sk#57], Inner, BuildRight
                              :                 :     :- *(24) Project [ss_sold_date_sk#45, ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20]
                              :                 :     :  +- *(24) BroadcastHashJoin [ss_item_sk#42], [i_item_sk#58], Inner, BuildRight
                              :                 :     :     :- *(24) Project [ss_sold_date_sk#45, ss_item_sk#42, ss_ticket_number#41, ss_quantity#35, ss_ext_sales_price#38]
                              :                 :     :     :  +- *(24) Filter (isnotnull(ss_item_sk#42) && isnotnull(ss_sold_date_sk#45))
                              :                 :     :     :     +- *(24) FileScan parquet default.store_sales[ss_sold_date_sk#45,ss_item_sk#42,ss_ticket_number#41,ss_quantity#35,ss_ext_sales_price#38] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price...
                              :                 :     :     +- ReusedExchange [i_item_sk#58, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :                 :     +- ReusedExchange [d_date_sk#57, d_year#11], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              :                 +- ReusedExchange [sr_item_sk#44, sr_ticket_number#43, sr_return_quantity#36, sr_return_amt#39], BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))
                              +- *(30) Project [d_year#11, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, (ws_quantity#46 - coalesce(wr_return_quantity#47, 0)) AS sales_cnt#48, CheckOverflow((promote_precision(cast(ws_ext_sales_price#49 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#50, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#51]
                                 +- *(30) BroadcastHashJoin [cast(ws_order_number#52 as bigint), cast(ws_item_sk#53 as bigint)], [wr_order_number#54, wr_item_sk#55], LeftOuter, BuildRight
                                    :- *(30) Project [ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20, d_year#11]
                                    :  +- *(30) BroadcastHashJoin [ws_sold_date_sk#56], [d_date_sk#57], Inner, BuildRight
                                    :     :- *(30) Project [ws_sold_date_sk#56, ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20]
                                    :     :  +- *(30) BroadcastHashJoin [ws_item_sk#53], [i_item_sk#58], Inner, BuildRight
                                    :     :     :- *(30) Project [ws_sold_date_sk#56, ws_item_sk#53, ws_order_number#52, ws_quantity#46, ws_ext_sales_price#49]
                                    :     :     :  +- *(30) Filter (isnotnull(ws_item_sk#53) && isnotnull(ws_sold_date_sk#56))
                                    :     :     :     +- *(30) FileScan parquet default.web_sales[ws_sold_date_sk#56,ws_item_sk#53,ws_order_number#52,ws_quantity#46,ws_ext_sales_price#49] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:...
                                    :     :     +- ReusedExchange [i_item_sk#58, i_brand_id#17, i_class_id#18, i_category_id#19, i_manufact_id#20], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                                    :     +- ReusedExchange [d_date_sk#57, d_year#11], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                                    +- ReusedExchange [wr_item_sk#55, wr_order_number#54, wr_return_quantity#47, wr_return_amt#50], BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]))