== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[CheckOverflow((promote_precision(cast(sum_sales#1 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#2 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST,cc_name#3 ASC NULLS FIRST], output=[i_category#4,i_brand#5,cc_name#3,d_year#6,d_moy#7,avg_monthly_sales#2,sum_sales#1,psum#8,nsum#9])
+- *(22) Project [i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7, avg_monthly_sales#2, sum_sales#1, sum_sales#10 AS psum#8, sum_sales#11 AS nsum#9]
   +- *(22) BroadcastHashJoin [i_category#4, i_brand#5, cc_name#3, rn#12], [i_category#13, i_brand#14, cc_name#15, (rn#16 - 1)], Inner, BuildRight
      :- *(22) Project [i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7, sum_sales#1, avg_monthly_sales#2, rn#12, sum_sales#10]
      :  +- *(22) BroadcastHashJoin [i_category#4, i_brand#5, cc_name#3, rn#12], [i_category#17, i_brand#18, cc_name#19, (rn#20 + 1)], Inner, BuildRight
      :     :- *(22) Project [i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7, sum_sales#1, avg_monthly_sales#2, rn#12]
      :     :  +- *(22) Filter (((isnotnull(avg_monthly_sales#2) && (avg_monthly_sales#2 > 0.000000)) && (CASE WHEN (avg_monthly_sales#2 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#1 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#2 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#2 as decimal(22,6)))), DecimalType(38,16)) ELSE null END > 0.1000000000000000)) && isnotnull(rn#12))
      :     :     +- Window [avg(_w0#21) windowspecdefinition(i_category#4, i_brand#5, cc_name#3, d_year#6, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#2], [i_category#4, i_brand#5, cc_name#3, d_year#6]
      :     :        +- *(7) Filter (isnotnull(d_year#6) && (d_year#6 = 1999))
      :     :           +- Window [rank(d_year#6, d_moy#7) windowspecdefinition(i_category#4, i_brand#5, cc_name#3, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#12], [i_category#4, i_brand#5, cc_name#3], [d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST]
      :     :              +- *(6) Sort [i_category#4 ASC NULLS FIRST, i_brand#5 ASC NULLS FIRST, cc_name#3 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST], false, 0
      :     :                 +- Exchange hashpartitioning(i_category#4, i_brand#5, cc_name#3, 5)
      :     :                    +- *(5) HashAggregate(keys=[i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7], functions=[sum(UnscaledValue(cs_sales_price#22))])
      :     :                       +- Exchange hashpartitioning(i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7, 5)
      :     :                          +- *(4) HashAggregate(keys=[i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7], functions=[partial_sum(UnscaledValue(cs_sales_price#22))])
      :     :                             +- *(4) Project [i_brand#5, i_category#4, cs_sales_price#22, d_year#6, d_moy#7, cc_name#3]
      :     :                                +- *(4) BroadcastHashJoin [cs_call_center_sk#23], [cc_call_center_sk#24], Inner, BuildRight
      :     :                                   :- *(4) Project [i_brand#5, i_category#4, cs_call_center_sk#23, cs_sales_price#22, d_year#6, d_moy#7]
      :     :                                   :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#25], [d_date_sk#26], Inner, BuildRight
      :     :                                   :     :- *(4) Project [i_brand#5, i_category#4, cs_sold_date_sk#25, cs_call_center_sk#23, cs_sales_price#22]
      :     :                                   :     :  +- *(4) BroadcastHashJoin [i_item_sk#27], [cs_item_sk#28], Inner, BuildRight
      :     :                                   :     :     :- *(4) Project [i_item_sk#27, i_brand#5, i_category#4]
      :     :                                   :     :     :  +- *(4) Filter ((isnotnull(i_item_sk#27) && isnotnull(i_brand#5)) && isnotnull(i_category#4))
      :     :                                   :     :     :     +- *(4) FileScan parquet default.item[i_item_sk#27,i_brand#5,i_category#4] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand), IsNotNull(i_category)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>
      :     :                                   :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)))
      :     :                                   :     :        +- *(1) Project [cs_sold_date_sk#25, cs_call_center_sk#23, cs_item_sk#28, cs_sales_price#22]
      :     :                                   :     :           +- *(1) Filter ((isnotnull(cs_item_sk#28) && isnotnull(cs_sold_date_sk#25)) && isnotnull(cs_call_center_sk#23))
      :     :                                   :     :              +- *(1) FileScan parquet default.catalog_sales[cs_sold_date_sk#25,cs_call_center_sk#23,cs_item_sk#28,cs_sales_price#22] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>
      :     :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                                   :        +- *(2) Project [d_date_sk#26, d_year#6, d_moy#7]
      :     :                                   :           +- *(2) Filter ((((d_year#6 = 1999) || ((d_year#6 = 1998) && (d_moy#7 = 12))) || ((d_year#6 = 2000) && (d_moy#7 = 1))) && isnotnull(d_date_sk#26))
      :     :                                   :              +- *(2) FileScan parquet default.date_dim[d_date_sk#26,d_year#6,d_moy#7] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
      :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :                                      +- *(3) Project [cc_call_center_sk#24, cc_name#3]
      :     :                                         +- *(3) Filter (isnotnull(cc_call_center_sk#24) && isnotnull(cc_name#3))
      :     :                                            +- *(3) FileScan parquet default.call_center[cc_call_center_sk#24,cc_name#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] + 1)))
      :        +- *(14) Project [i_category#17, i_brand#18, cc_name#19, sum_sales#10, rn#20]
      :           +- *(14) Filter isnotnull(rn#20)
      :              +- Window [rank(d_year#29, d_moy#30) windowspecdefinition(i_category#17, i_brand#18, cc_name#19, d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#20], [i_category#17, i_brand#18, cc_name#19], [d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST]
      :                 +- *(13) Sort [i_category#17 ASC NULLS FIRST, i_brand#18 ASC NULLS FIRST, cc_name#19 ASC NULLS FIRST, d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST], false, 0
      :                    +- Exchange hashpartitioning(i_category#17, i_brand#18, cc_name#19, 5)
      :                       +- *(12) HashAggregate(keys=[i_category#17, i_brand#18, cc_name#19, d_year#29, d_moy#30], functions=[sum(UnscaledValue(cs_sales_price#22))])
      :                          +- ReusedExchange [i_category#17, i_brand#18, cc_name#19, d_year#29, d_moy#30, sum#31], Exchange hashpartitioning(i_category#4, i_brand#5, cc_name#3, d_year#6, d_moy#7, 5)
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] - 1)))
         +- *(21) Project [i_category#13, i_brand#14, cc_name#15, sum_sales#11, rn#16]
            +- *(21) Filter isnotnull(rn#16)
               +- Window [rank(d_year#32, d_moy#33) windowspecdefinition(i_category#13, i_brand#14, cc_name#15, d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#16], [i_category#13, i_brand#14, cc_name#15], [d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST]
                  +- *(20) Sort [i_category#13 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, cc_name#15 ASC NULLS FIRST, d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST], false, 0
                     +- ReusedExchange [i_category#13, i_brand#14, cc_name#15, d_year#32, d_moy#33, sum_sales#11], Exchange hashpartitioning(i_category#17, i_brand#18, cc_name#19, 5)