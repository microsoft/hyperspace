== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[i_category#1 ASC NULLS FIRST,i_class#2 ASC NULLS FIRST,i_item_id#3 ASC NULLS FIRST,i_item_desc#4 ASC NULLS FIRST,revenueratio#5 ASC NULLS FIRST], output=[i_item_desc#4,i_category#1,i_class#2,i_current_price#6,itemrevenue#7,revenueratio#5])
+- *(6) Project [i_item_desc#4, i_category#1, i_class#2, i_current_price#6, itemrevenue#7, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#8) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#9)), DecimalType(38,17)) AS revenueratio#5, i_item_id#3]
   +- Window [sum(_w1#10) windowspecdefinition(i_class#2, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#9], [i_class#2]
      +- *(5) Sort [i_class#2 ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(i_class#2, 5)
            +- *(4) HashAggregate(keys=[i_item_id#3, i_item_desc#4, i_category#1, i_class#2, i_current_price#6], functions=[sum(UnscaledValue(ws_ext_sales_price#11))])
               +- Exchange hashpartitioning(i_item_id#3, i_item_desc#4, i_category#1, i_class#2, i_current_price#6, 5)
                  +- *(3) HashAggregate(keys=[i_item_id#3, i_item_desc#4, i_category#1, i_class#2, i_current_price#6], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#11))])
                     +- *(3) Project [ws_ext_sales_price#11, i_item_id#3, i_item_desc#4, i_current_price#6, i_class#2, i_category#1]
                        +- *(3) BroadcastHashJoin [ws_sold_date_sk#12], [d_date_sk#13], Inner, BuildRight
                           :- *(3) Project [ws_sold_date_sk#12, ws_ext_sales_price#11, i_item_id#3, i_item_desc#4, i_current_price#6, i_class#2, i_category#1]
                           :  +- *(3) BroadcastHashJoin [ws_item_sk#14], [i_item_sk#15], Inner, BuildRight
                           :     :- *(3) Project [ws_sold_date_sk#12, ws_item_sk#14, ws_ext_sales_price#11]
                           :     :  +- *(3) Filter (isnotnull(ws_item_sk#14) && isnotnull(ws_sold_date_sk#12))
                           :     :     +- *(3) FileScan parquet default.web_sales[ws_sold_date_sk#12,ws_item_sk#14,ws_ext_sales_price#11] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :        +- *(1) Project [i_item_sk#15, i_item_id#3, i_item_desc#4, i_current_price#6, i_class#2, i_category#1]
                           :           +- *(1) Filter (i_category#1 IN (Sports,Books,Home) && isnotnull(i_item_sk#15))
                           :              +- *(1) FileScan parquet default.item[i_item_sk#15,i_item_id#3,i_item_desc#4,i_current_price#6,i_class#2,i_category#1] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/item], PartitionFilters: [], PushedFilters: [In(i_category, [Sports,Books,Home]), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                              +- *(2) Project [d_date_sk#13]
                                 +- *(2) Filter (((isnotnull(d_date#16) && (d_date#16 >= 10644)) && (d_date#16 <= 10674)) && isnotnull(d_date_sk#13))
                                    +- *(2) FileScan parquet default.date_dim[d_date_sk#13,d_date#16] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>