== Physical Plan ==
* Sort (41)
+- * HashAggregate (40)
   +- Exchange (39)
      +- * HashAggregate (38)
         +- * HashAggregate (37)
            +- Exchange (36)
               +- * HashAggregate (35)
                  +- * Project (34)
                     +- * BroadcastHashJoin Inner BuildRight (33)
                        :- * Project (27)
                        :  +- * BroadcastHashJoin Inner BuildRight (26)
                        :     :- * Project (20)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (19)
                        :     :     :- * BroadcastHashJoin LeftAnti BuildRight (13)
                        :     :     :  :- * Project (9)
                        :     :     :  :  +- * BroadcastHashJoin LeftSemi BuildRight (8)
                        :     :     :  :     :- * Filter (3)
                        :     :     :  :     :  +- * ColumnarToRow (2)
                        :     :     :  :     :     +- Scan parquet default.catalog_sales (1)
                        :     :     :  :     +- BroadcastExchange (7)
                        :     :     :  :        +- * Project (6)
                        :     :     :  :           +- * ColumnarToRow (5)
                        :     :     :  :              +- Scan parquet default.catalog_sales (4)
                        :     :     :  +- BroadcastExchange (12)
                        :     :     :     +- * ColumnarToRow (11)
                        :     :     :        +- Scan parquet default.catalog_returns (10)
                        :     :     +- BroadcastExchange (18)
                        :     :        +- * Project (17)
                        :     :           +- * Filter (16)
                        :     :              +- * ColumnarToRow (15)
                        :     :                 +- Scan parquet default.date_dim (14)
                        :     +- BroadcastExchange (25)
                        :        +- * Project (24)
                        :           +- * Filter (23)
                        :              +- * ColumnarToRow (22)
                        :                 +- Scan parquet default.customer_address (21)
                        +- BroadcastExchange (32)
                           +- * Project (31)
                              +- * Filter (30)
                                 +- * ColumnarToRow (29)
                                    +- Scan parquet default.call_center (28)


(1) Scan parquet default.catalog_sales
Output [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order_number:int,cs_ext_ship_cost:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(3) Filter [codegen id : 6]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Condition : ((isnotnull(cs_ship_date_sk#1) AND isnotnull(cs_ship_addr_sk#2)) AND isnotnull(cs_call_center_sk#3))

(4) Scan parquet default.catalog_sales
Output [2]: [cs_warehouse_sk#4, cs_order_number#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [cs_warehouse_sk#4, cs_order_number#5]

(6) Project [codegen id : 1]
Output [2]: [cs_warehouse_sk#4 AS cs_warehouse_sk#4#8, cs_order_number#5 AS cs_order_number#5#9]
Input [2]: [cs_warehouse_sk#4, cs_order_number#5]

(7) BroadcastExchange
Input [2]: [cs_warehouse_sk#4#8, cs_order_number#5#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#10]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cs_order_number#5#9]
Join condition: NOT (cs_warehouse_sk#4 = cs_warehouse_sk#4#8)

(9) Project [codegen id : 6]
Output [6]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(10) Scan parquet default.catalog_returns
Output [1]: [cr_order_number#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
ReadSchema: struct<cr_order_number:int>

(11) ColumnarToRow [codegen id : 2]
Input [1]: [cr_order_number#11]

(12) BroadcastExchange
Input [1]: [cr_order_number#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(13) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cr_order_number#11]
Join condition: None

(14) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#13, d_date#14]

(16) Filter [codegen id : 3]
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 11719)) AND (d_date#14 <= 11779)) AND isnotnull(d_date_sk#13))

(17) Project [codegen id : 3]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_date#14]

(18) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(19) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#13]
Join condition: None

(20) Project [codegen id : 6]
Output [5]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, d_date_sk#13]

(21) Scan parquet default.customer_address
Output [2]: [ca_address_sk#16, ca_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(22) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#16, ca_state#17]

(23) Filter [codegen id : 4]
Input [2]: [ca_address_sk#16, ca_state#17]
Condition : ((isnotnull(ca_state#17) AND (ca_state#17 = GA)) AND isnotnull(ca_address_sk#16))

(24) Project [codegen id : 4]
Output [1]: [ca_address_sk#16]
Input [2]: [ca_address_sk#16, ca_state#17]

(25) BroadcastExchange
Input [1]: [ca_address_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#16]
Join condition: None

(27) Project [codegen id : 6]
Output [4]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [6]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, ca_address_sk#16]

(28) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#19, cc_county#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [cc_call_center_sk#19, cc_county#20]

(30) Filter [codegen id : 5]
Input [2]: [cc_call_center_sk#19, cc_county#20]
Condition : ((isnotnull(cc_county#20) AND (cc_county#20 = Williamson County)) AND isnotnull(cc_call_center_sk#19))

(31) Project [codegen id : 5]
Output [1]: [cc_call_center_sk#19]
Input [2]: [cc_call_center_sk#19, cc_county#20]

(32) BroadcastExchange
Input [1]: [cc_call_center_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_call_center_sk#3]
Right keys [1]: [cc_call_center_sk#19]
Join condition: None

(34) Project [codegen id : 6]
Output [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [5]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cc_call_center_sk#19]

(35) HashAggregate [codegen id : 6]
Input [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Keys [1]: [cs_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_ship_cost#6)), partial_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#22, sum(UnscaledValue(cs_net_profit#7))#23]
Results [3]: [cs_order_number#5, sum#24, sum#25]

(36) Exchange
Input [3]: [cs_order_number#5, sum#24, sum#25]
Arguments: hashpartitioning(cs_order_number#5, 5), true, [id=#26]

(37) HashAggregate [codegen id : 7]
Input [3]: [cs_order_number#5, sum#24, sum#25]
Keys [1]: [cs_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#22, sum(UnscaledValue(cs_net_profit#7))#23]
Results [3]: [cs_order_number#5, sum#24, sum#25]

(38) HashAggregate [codegen id : 7]
Input [3]: [cs_order_number#5, sum#24, sum#25]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7)), partial_count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#22, sum(UnscaledValue(cs_net_profit#7))#23, count(cs_order_number#5)#27]
Results [3]: [sum#24, sum#25, count#28]

(39) Exchange
Input [3]: [sum#24, sum#25, count#28]
Arguments: SinglePartition, true, [id=#29]

(40) HashAggregate [codegen id : 8]
Input [3]: [sum#24, sum#25, count#28]
Keys: []
Functions [3]: [sum(UnscaledValue(cs_ext_ship_cost#6)), sum(UnscaledValue(cs_net_profit#7)), count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#22, sum(UnscaledValue(cs_net_profit#7))#23, count(cs_order_number#5)#27]
Results [3]: [count(cs_order_number#5)#27 AS order count #30, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#6))#22,17,2) AS total shipping cost #31, MakeDecimal(sum(UnscaledValue(cs_net_profit#7))#23,17,2) AS total net profit #32]

(41) Sort [codegen id : 8]
Input [3]: [order count #30, total shipping cost #31, total net profit #32]
Arguments: [order count #30 ASC NULLS FIRST], true, 0

