== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Project (46)
            +- * BroadcastHashJoin Inner BuildRight (45)
               :- * Project (40)
               :  +- * BroadcastHashJoin Inner BuildRight (39)
               :     :- * Project (33)
               :     :  +- * Filter (32)
               :     :     +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (31)
               :     :        :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (23)
               :     :        :  :- * BroadcastHashJoin LeftSemi BuildRight (15)
               :     :        :  :  :- * Filter (3)
               :     :        :  :  :  +- * ColumnarToRow (2)
               :     :        :  :  :     +- Scan parquet default.customer (1)
               :     :        :  :  +- BroadcastExchange (14)
               :     :        :  :     +- * Project (13)
               :     :        :  :        +- * BroadcastHashJoin Inner BuildRight (12)
               :     :        :  :           :- * Filter (6)
               :     :        :  :           :  +- * ColumnarToRow (5)
               :     :        :  :           :     +- Scan parquet default.store_sales (4)
               :     :        :  :           +- BroadcastExchange (11)
               :     :        :  :              +- * Project (10)
               :     :        :  :                 +- * Filter (9)
               :     :        :  :                    +- * ColumnarToRow (8)
               :     :        :  :                       +- Scan parquet default.date_dim (7)
               :     :        :  +- BroadcastExchange (22)
               :     :        :     +- * Project (21)
               :     :        :        +- * BroadcastHashJoin Inner BuildRight (20)
               :     :        :           :- * Filter (18)
               :     :        :           :  +- * ColumnarToRow (17)
               :     :        :           :     +- Scan parquet default.web_sales (16)
               :     :        :           +- ReusedExchange (19)
               :     :        +- BroadcastExchange (30)
               :     :           +- * Project (29)
               :     :              +- * BroadcastHashJoin Inner BuildRight (28)
               :     :                 :- * Filter (26)
               :     :                 :  +- * ColumnarToRow (25)
               :     :                 :     +- Scan parquet default.catalog_sales (24)
               :     :                 +- ReusedExchange (27)
               :     +- BroadcastExchange (38)
               :        +- * Project (37)
               :           +- * Filter (36)
               :              +- * ColumnarToRow (35)
               :                 +- Scan parquet default.customer_address (34)
               +- BroadcastExchange (44)
                  +- * Filter (43)
                     +- * ColumnarToRow (42)
                        +- Scan parquet default.customer_demographics (41)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(4) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#6, ss_customer_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_sold_date_sk#6, ss_customer_sk#7]

(6) Filter [codegen id : 2]
Input [2]: [ss_sold_date_sk#6, ss_customer_sk#7]
Condition : isnotnull(ss_sold_date_sk#6)

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#9, d_moy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]
Condition : (((((isnotnull(d_year#9) AND isnotnull(d_moy#10)) AND (d_year#9 = 2002)) AND (d_moy#10 >= 1)) AND (d_moy#10 <= 4)) AND isnotnull(d_date_sk#8))

(10) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]

(11) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [ss_customer_sk#7]
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, d_date_sk#8]

(14) BroadcastExchange
Input [1]: [ss_customer_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(16) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#13, ws_bill_customer_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [ws_sold_date_sk#13, ws_bill_customer_sk#14]

(18) Filter [codegen id : 4]
Input [2]: [ws_sold_date_sk#13, ws_bill_customer_sk#14]
Condition : isnotnull(ws_sold_date_sk#13)

(19) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#8]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#13]
Right keys [1]: [d_date_sk#8]
Join condition: None

(21) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#14]
Input [3]: [ws_sold_date_sk#13, ws_bill_customer_sk#14, d_date_sk#8]

(22) BroadcastExchange
Input [1]: [ws_bill_customer_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#14]
Join condition: None

(24) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_ship_customer_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(25) ColumnarToRow [codegen id : 6]
Input [2]: [cs_sold_date_sk#16, cs_ship_customer_sk#17]

(26) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#16, cs_ship_customer_sk#17]
Condition : isnotnull(cs_sold_date_sk#16)

(27) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#8]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#8]
Join condition: None

(29) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_sold_date_sk#16, cs_ship_customer_sk#17, d_date_sk#8]

(30) BroadcastExchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join condition: None

(32) Filter [codegen id : 9]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(33) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(34) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_county#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(35) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_county#20]

(36) Filter [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_county#20]
Condition : (ca_county#20 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#19))

(37) Project [codegen id : 7]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_county#20]

(38) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(40) Project [codegen id : 9]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#19]

(41) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(42) ColumnarToRow [codegen id : 8]
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(43) Filter [codegen id : 8]
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Condition : isnotnull(cd_demo_sk#22)

(44) BroadcastExchange
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(45) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#22]
Join condition: None

(46) Project [codegen id : 9]
Output [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(47) HashAggregate [codegen id : 9]
Input [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Keys [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#33]

(48) Exchange
Input [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#33]
Arguments: hashpartitioning(cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, 5), true, [id=#34]

(49) HashAggregate [codegen id : 10]
Input [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#33]
Keys [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#35]
Results [14]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, count(1)#35 AS cnt1#36, cd_purchase_estimate#26, count(1)#35 AS cnt2#37, cd_credit_rating#27, count(1)#35 AS cnt3#38, cd_dep_count#28, count(1)#35 AS cnt4#39, cd_dep_employed_count#29, count(1)#35 AS cnt5#40, cd_dep_college_count#30, count(1)#35 AS cnt6#41]

(50) TakeOrderedAndProject
Input [14]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#36, cd_purchase_estimate#26, cnt2#37, cd_credit_rating#27, cnt3#38, cd_dep_count#28, cnt4#39, cd_dep_employed_count#29, cnt5#40, cd_dep_college_count#30, cnt6#41]
Arguments: 100, [cd_gender#23 ASC NULLS FIRST, cd_marital_status#24 ASC NULLS FIRST, cd_education_status#25 ASC NULLS FIRST, cd_purchase_estimate#26 ASC NULLS FIRST, cd_credit_rating#27 ASC NULLS FIRST, cd_dep_count#28 ASC NULLS FIRST, cd_dep_employed_count#29 ASC NULLS FIRST, cd_dep_college_count#30 ASC NULLS FIRST], [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#36, cd_purchase_estimate#26, cnt2#37, cd_credit_rating#27, cnt3#38, cd_dep_count#28, cnt4#39, cd_dep_employed_count#29, cnt5#40, cd_dep_college_count#30, cnt6#41]

