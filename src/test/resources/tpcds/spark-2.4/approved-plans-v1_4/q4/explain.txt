== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[customer_id#1 ASC NULLS FIRST,customer_first_name#2 ASC NULLS FIRST,customer_last_name#3 ASC NULLS FIRST,customer_preferred_cust_flag#4 ASC NULLS FIRST,customer_birth_country#5 ASC NULLS FIRST,customer_login#6 ASC NULLS FIRST,customer_email_address#7 ASC NULLS FIRST], output=[customer_id#1,customer_first_name#2,customer_last_name#3,customer_preferred_cust_flag#4,customer_birth_country#5,customer_login#6,customer_email_address#7])
+- *(25) Project [customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7]
   +- *(25) BroadcastHashJoin [customer_id#8], [customer_id#9], Inner, BuildRight, (CASE WHEN (year_total#10 > 0.000000) THEN CheckOverflow((promote_precision(year_total#11) / promote_precision(year_total#10)), DecimalType(38,14)) ELSE null END > CASE WHEN (year_total#12 > 0.000000) THEN CheckOverflow((promote_precision(year_total#13) / promote_precision(year_total#12)), DecimalType(38,14)) ELSE null END)
      :- *(25) Project [customer_id#8, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#10, year_total#11, year_total#12]
      :  +- *(25) BroadcastHashJoin [customer_id#8], [customer_id#14], Inner, BuildRight
      :     :- *(25) Project [customer_id#8, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#10, year_total#11]
      :     :  +- *(25) BroadcastHashJoin [customer_id#8], [customer_id#15], Inner, BuildRight, (CASE WHEN (year_total#10 > 0.000000) THEN CheckOverflow((promote_precision(year_total#11) / promote_precision(year_total#10)), DecimalType(38,14)) ELSE null END > CASE WHEN (year_total#16 > 0.000000) THEN CheckOverflow((promote_precision(year_total#17) / promote_precision(year_total#16)), DecimalType(38,14)) ELSE null END)
      :     :     :- *(25) Project [customer_id#8, year_total#16, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#17, year_total#10]
      :     :     :  +- *(25) BroadcastHashJoin [customer_id#8], [customer_id#18], Inner, BuildRight
      :     :     :     :- *(25) BroadcastHashJoin [customer_id#8], [customer_id#1], Inner, BuildRight
      :     :     :     :  :- Union
      :     :     :     :  :  :- *(4) Filter (isnotnull(year_total#16) && (year_total#16 > 0.000000))
      :     :     :     :  :  :  +- *(4) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :  :  :     +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :     :  :  :        +- *(3) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :  :  :           +- *(3) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27, d_year#26]
      :     :     :     :  :  :              +- *(3) BroadcastHashJoin [ss_sold_date_sk#31], [d_date_sk#32], Inner, BuildRight
      :     :     :     :  :  :                 :- *(3) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_sold_date_sk#31, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27]
      :     :     :     :  :  :                 :  +- *(3) BroadcastHashJoin [c_customer_sk#33], [ss_customer_sk#34], Inner, BuildRight
      :     :     :     :  :  :                 :     :- *(3) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :     :     :  :  :                 :     :  +- *(3) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :     :     :  :  :                 :     :     +- *(3) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :     :  :  :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :     :     :  :  :                 :        +- *(1) Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27]
      :     :     :     :  :  :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#34) && isnotnull(ss_sold_date_sk#31))
      :     :     :     :  :  :                 :              +- *(1) FileScan parquet default.store_sales[ss_sold_date_sk#31,ss_customer_sk#34,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#28,ss_ext_list_price#27] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
      :     :     :     :  :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :     :     :  :  :                    +- *(2) Project [d_date_sk#32, d_year#26]
      :     :     :     :  :  :                       +- *(2) Filter ((isnotnull(d_year#26) && (d_year#26 = 2001)) && isnotnull(d_date_sk#32))
      :     :     :     :  :  :                          +- *(2) FileScan parquet default.date_dim[d_date_sk#32,d_year#26] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     :  :  :- LocalTableScan <empty>, [customer_id#35, year_total#36]
      :     :     :     :  :  +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :     :     :     +- Union
      :     :     :     :        :- *(8) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :        :  +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :     :        :     +- *(7) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :        :        +- *(7) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27, d_year#26]
      :     :     :     :        :           +- *(7) BroadcastHashJoin [ss_sold_date_sk#31], [d_date_sk#32], Inner, BuildRight
      :     :     :     :        :              :- *(7) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_sold_date_sk#31, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27]
      :     :     :     :        :              :  +- *(7) BroadcastHashJoin [c_customer_sk#33], [ss_customer_sk#34], Inner, BuildRight
      :     :     :     :        :              :     :- *(7) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :     :     :        :              :     :  +- *(7) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :     :     :        :              :     :     +- *(7) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :     :        :              :     +- ReusedExchange [ss_sold_date_sk#31, ss_customer_sk#34, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :     :     :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :     :     :        :                 +- *(6) Project [d_date_sk#32, d_year#26]
      :     :     :     :        :                    +- *(6) Filter ((isnotnull(d_year#26) && (d_year#26 = 2002)) && isnotnull(d_date_sk#32))
      :     :     :     :        :                       +- *(6) FileScan parquet default.date_dim[d_date_sk#32,d_year#26] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     :        :- LocalTableScan <empty>, [customer_id#35, customer_first_name#39, customer_last_name#40, customer_preferred_cust_flag#41, customer_birth_country#42, customer_login#43, customer_email_address#44, year_total#36]
      :     :     :     :        +- LocalTableScan <empty>, [customer_id#37, customer_first_name#45, customer_last_name#46, customer_preferred_cust_flag#47, customer_birth_country#48, customer_login#49, customer_email_address#50, year_total#38]
      :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :     :        +- Union
      :     :     :           :- LocalTableScan <empty>, [customer_id#18, year_total#10]
      :     :     :           :- *(12) Filter (isnotnull(year_total#36) && (year_total#36 > 0.000000))
      :     :     :           :  +- *(12) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :           :     +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :           :        +- *(11) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :           :           +- *(11) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51, d_year#26]
      :     :     :           :              +- *(11) BroadcastHashJoin [cs_sold_date_sk#55], [d_date_sk#32], Inner, BuildRight
      :     :     :           :                 :- *(11) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_sold_date_sk#55, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51]
      :     :     :           :                 :  +- *(11) BroadcastHashJoin [c_customer_sk#33], [cs_bill_customer_sk#56], Inner, BuildRight
      :     :     :           :                 :     :- *(11) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :     :           :                 :     :  +- *(11) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :     :           :                 :     :     +- *(11) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :     :           :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :     :           :                 :        +- *(9) Project [cs_sold_date_sk#55, cs_bill_customer_sk#56, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51]
      :     :     :           :                 :           +- *(9) Filter (isnotnull(cs_bill_customer_sk#56) && isnotnull(cs_sold_date_sk#55))
      :     :     :           :                 :              +- *(9) FileScan parquet default.catalog_sales[cs_sold_date_sk#55,cs_bill_customer_sk#56,cs_ext_discount_amt#53,cs_ext_sales_price#54,cs_ext_wholesale_cost#52,cs_ext_list_price#51] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
      :     :     :           :                 +- ReusedExchange [d_date_sk#32, d_year#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :     :           +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :        +- Union
      :     :           :- LocalTableScan <empty>, [customer_id#15, year_total#11]
      :     :           :- *(16) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :           :  +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :           :     +- *(15) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :           :        +- *(15) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51, d_year#26]
      :     :           :           +- *(15) BroadcastHashJoin [cs_sold_date_sk#55], [d_date_sk#32], Inner, BuildRight
      :     :           :              :- *(15) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_sold_date_sk#55, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51]
      :     :           :              :  +- *(15) BroadcastHashJoin [c_customer_sk#33], [cs_bill_customer_sk#56], Inner, BuildRight
      :     :           :              :     :- *(15) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :           :              :     :  +- *(15) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :           :              :     :     +- *(15) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :     :           :              :     +- ReusedExchange [cs_sold_date_sk#55, cs_bill_customer_sk#56, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :           :              +- ReusedExchange [d_date_sk#32, d_year#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :           +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :        +- Union
      :           :- LocalTableScan <empty>, [customer_id#14, year_total#12]
      :           :- LocalTableScan <empty>, [customer_id#35, year_total#36]
      :           +- *(20) Filter (isnotnull(year_total#38) && (year_total#38 > 0.000000))
      :              +- *(20) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :                 +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :                    +- *(19) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :                       +- *(19) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57, d_year#26]
      :                          +- *(19) BroadcastHashJoin [ws_sold_date_sk#61], [d_date_sk#32], Inner, BuildRight
      :                             :- *(19) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_sold_date_sk#61, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57]
      :                             :  +- *(19) BroadcastHashJoin [c_customer_sk#33], [ws_bill_customer_sk#62], Inner, BuildRight
      :                             :     :- *(19) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :                             :     :  +- *(19) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :                             :     :     +- *(19) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
      :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :                             :        +- *(17) Project [ws_sold_date_sk#61, ws_bill_customer_sk#62, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57]
      :                             :           +- *(17) Filter (isnotnull(ws_bill_customer_sk#62) && isnotnull(ws_sold_date_sk#61))
      :                             :              +- *(17) FileScan parquet default.web_sales[ws_sold_date_sk#61,ws_bill_customer_sk#62,ws_ext_discount_amt#59,ws_ext_sales_price#60,ws_ext_wholesale_cost#58,ws_ext_list_price#57] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
      :                             +- ReusedExchange [d_date_sk#32, d_year#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
         +- Union
            :- LocalTableScan <empty>, [customer_id#9, year_total#13]
            :- LocalTableScan <empty>, [customer_id#35, year_total#36]
            +- *(24) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
               +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
                  +- *(23) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
                     +- *(23) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57, d_year#26]
                        +- *(23) BroadcastHashJoin [ws_sold_date_sk#61], [d_date_sk#32], Inner, BuildRight
                           :- *(23) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_sold_date_sk#61, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57]
                           :  +- *(23) BroadcastHashJoin [c_customer_sk#33], [ws_bill_customer_sk#62], Inner, BuildRight
                           :     :- *(23) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
                           :     :  +- *(23) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
                           :     :     +- *(23) FileScan parquet default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
                           :     +- ReusedExchange [ws_sold_date_sk#61, ws_bill_customer_sk#62, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
                           +- ReusedExchange [d_date_sk#32, d_year#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))