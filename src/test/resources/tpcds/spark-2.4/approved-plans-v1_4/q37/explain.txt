== Physical Plan ==
TakeOrderedAndProject (28)
+- * HashAggregate (27)
   +- Exchange (26)
      +- * HashAggregate (25)
         +- * Project (24)
            +- * BroadcastHashJoin Inner BuildRight (23)
               :- * Project (18)
               :  +- * BroadcastHashJoin Inner BuildRight (17)
               :     :- * Project (11)
               :     :  +- * BroadcastHashJoin Inner BuildRight (10)
               :     :     :- * Project (4)
               :     :     :  +- * Filter (3)
               :     :     :     +- * ColumnarToRow (2)
               :     :     :        +- Scan parquet default.item (1)
               :     :     +- BroadcastExchange (9)
               :     :        +- * Project (8)
               :     :           +- * Filter (7)
               :     :              +- * ColumnarToRow (6)
               :     :                 +- Scan parquet default.inventory (5)
               :     +- BroadcastExchange (16)
               :        +- * Project (15)
               :           +- * Filter (14)
               :              +- * ColumnarToRow (13)
               :                 +- Scan parquet default.date_dim (12)
               +- BroadcastExchange (22)
                  +- * Filter (21)
                     +- * ColumnarToRow (20)
                        +- Scan parquet default.catalog_sales (19)


(1) Scan parquet default.item
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,68.00), In(i_manufact_id, [677,940,694,808]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(3) Filter [codegen id : 4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Condition : ((((isnotnull(i_current_price#4) AND (i_current_price#4 >= 68.00)) AND (cast(i_current_price#4 as decimal(12,2)) <= 98.00)) AND i_manufact_id#5 IN (677,940,694,808)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 4]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(5) Scan parquet default.inventory
Output [3]: [inv_date_sk#6, inv_item_sk#7, inv_quantity_on_hand#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>

(6) ColumnarToRow [codegen id : 1]
Input [3]: [inv_date_sk#6, inv_item_sk#7, inv_quantity_on_hand#8]

(7) Filter [codegen id : 1]
Input [3]: [inv_date_sk#6, inv_item_sk#7, inv_quantity_on_hand#8]
Condition : ((((isnotnull(inv_quantity_on_hand#8) AND (inv_quantity_on_hand#8 >= 100)) AND (inv_quantity_on_hand#8 <= 500)) AND isnotnull(inv_item_sk#7)) AND isnotnull(inv_date_sk#6))

(8) Project [codegen id : 1]
Output [2]: [inv_date_sk#6, inv_item_sk#7]
Input [3]: [inv_date_sk#6, inv_item_sk#7, inv_quantity_on_hand#8]

(9) BroadcastExchange
Input [2]: [inv_date_sk#6, inv_item_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#9]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#7]
Join condition: None

(11) Project [codegen id : 4]
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#6]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#6, inv_item_sk#7]

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_date#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-01), LessThanOrEqual(d_date,2000-04-01), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_date#11]

(14) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_date#11]
Condition : (((isnotnull(d_date#11) AND (d_date#11 >= 10988)) AND (d_date#11 <= 11048)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_date#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 4]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#6, d_date_sk#10]

(19) Scan parquet default.catalog_sales
Output [1]: [cs_item_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(20) ColumnarToRow [codegen id : 3]
Input [1]: [cs_item_sk#13]

(21) Filter [codegen id : 3]
Input [1]: [cs_item_sk#13]
Condition : isnotnull(cs_item_sk#13)

(22) BroadcastExchange
Input [1]: [cs_item_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#13]
Join condition: None

(24) Project [codegen id : 4]
Output [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, cs_item_sk#13]

(25) HashAggregate [codegen id : 4]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(26) Exchange
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#3, i_current_price#4, 5), true, [id=#15]

(27) HashAggregate [codegen id : 5]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(28) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#3, i_current_price#4]

