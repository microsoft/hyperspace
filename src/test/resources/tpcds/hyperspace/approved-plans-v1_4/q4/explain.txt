== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[customer_id#1 ASC NULLS FIRST,customer_first_name#2 ASC NULLS FIRST,customer_last_name#3 ASC NULLS FIRST,customer_preferred_cust_flag#4 ASC NULLS FIRST,customer_birth_country#5 ASC NULLS FIRST,customer_login#6 ASC NULLS FIRST,customer_email_address#7 ASC NULLS FIRST], output=[customer_id#1,customer_first_name#2,customer_last_name#3,customer_preferred_cust_flag#4,customer_birth_country#5,customer_login#6,customer_email_address#7])
+- *(59) Project [customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7]
   +- *(59) SortMergeJoin [customer_id#8], [customer_id#9], Inner, (CASE WHEN (year_total#10 > 0.000000) THEN CheckOverflow((promote_precision(year_total#11) / promote_precision(year_total#10)), DecimalType(38,14)) ELSE null END > CASE WHEN (year_total#12 > 0.000000) THEN CheckOverflow((promote_precision(year_total#13) / promote_precision(year_total#12)), DecimalType(38,14)) ELSE null END)
      :- *(49) Project [customer_id#8, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#10, year_total#11, year_total#12]
      :  +- *(49) SortMergeJoin [customer_id#8], [customer_id#14], Inner
      :     :- *(39) Project [customer_id#8, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#10, year_total#11]
      :     :  +- *(39) SortMergeJoin [customer_id#8], [customer_id#15], Inner, (CASE WHEN (year_total#10 > 0.000000) THEN CheckOverflow((promote_precision(year_total#11) / promote_precision(year_total#10)), DecimalType(38,14)) ELSE null END > CASE WHEN (year_total#16 > 0.000000) THEN CheckOverflow((promote_precision(year_total#17) / promote_precision(year_total#16)), DecimalType(38,14)) ELSE null END)
      :     :     :- *(29) Project [customer_id#8, year_total#16, customer_id#1, customer_first_name#2, customer_last_name#3, customer_preferred_cust_flag#4, customer_birth_country#5, customer_login#6, customer_email_address#7, year_total#17, year_total#10]
      :     :     :  +- *(29) SortMergeJoin [customer_id#8], [customer_id#18], Inner
      :     :     :     :- *(19) SortMergeJoin [customer_id#8], [customer_id#1], Inner
      :     :     :     :  :- *(9) Sort [customer_id#8 ASC NULLS FIRST], false, 0
      :     :     :     :  :  +- Exchange hashpartitioning(customer_id#8, 5)
      :     :     :     :  :     +- Union
      :     :     :     :  :        :- *(8) Filter (isnotnull(year_total#16) && (year_total#16 > 0.000000))
      :     :     :     :  :        :  +- *(8) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :  :        :     +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :     :  :        :        +- *(7) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :  :        :           +- *(7) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27, d_year#26]
      :     :     :     :  :        :              +- *(7) SortMergeJoin [ss_sold_date_sk#31], [d_date_sk#32], Inner
      :     :     :     :  :        :                 :- *(4) Sort [ss_sold_date_sk#31 ASC NULLS FIRST], false, 0
      :     :     :     :  :        :                 :  +- Exchange hashpartitioning(ss_sold_date_sk#31, 5)
      :     :     :     :  :        :                 :     +- *(3) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_sold_date_sk#31, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27]
      :     :     :     :  :        :                 :        +- *(3) SortMergeJoin [c_customer_sk#33], [ss_customer_sk#34], Inner
      :     :     :     :  :        :                 :           :- *(1) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :     :     :  :        :                 :           :  +- *(1) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :     :     :  :        :                 :           :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_..., SelectedBucketsCount: 200 out of 200
      :     :     :     :  :        :                 :           +- *(2) Project [ss_sold_date_sk#31, ss_customer_sk#34, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27]
      :     :     :     :  :        :                 :              +- *(2) Filter (isnotnull(ss_customer_sk#34) && isnotnull(ss_sold_date_sk#31))
      :     :     :     :  :        :                 :                 +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex15-index-12-ss_customer_sk-20, LogVersion: 0) default.store_sales[ss_sold_date_sk#31,ss_customer_sk#34,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#28,ss_ext_list_price#27] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price..., SelectedBucketsCount: 200 out of 200
      :     :     :     :  :        :                 +- *(6) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
      :     :     :     :  :        :                    +- Exchange hashpartitioning(d_date_sk#32, 5)
      :     :     :     :  :        :                       +- *(5) Project [d_date_sk#32, d_year#26]
      :     :     :     :  :        :                          +- *(5) Filter ((isnotnull(d_year#26) && (d_year#26 = 2001)) && isnotnull(d_date_sk#32))
      :     :     :     :  :        :                             +- *(5) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#32,d_year#26] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     :  :        :- LocalTableScan <empty>, [customer_id#35, year_total#36]
      :     :     :     :  :        +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     :     :     :  +- *(18) Sort [customer_id#1 ASC NULLS FIRST], false, 0
      :     :     :     :     +- Exchange hashpartitioning(customer_id#1, 5)
      :     :     :     :        +- Union
      :     :     :     :           :- *(17) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :           :  +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :     :           :     +- *(16) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#27 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#28 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#29 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#30 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :     :           :        +- *(16) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27, d_year#26]
      :     :     :     :           :           +- *(16) SortMergeJoin [ss_sold_date_sk#31], [d_date_sk#32], Inner
      :     :     :     :           :              :- *(13) Sort [ss_sold_date_sk#31 ASC NULLS FIRST], false, 0
      :     :     :     :           :              :  +- ReusedExchange [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_sold_date_sk#31, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#28, ss_ext_list_price#27], Exchange hashpartitioning(ss_sold_date_sk#31, 5)
      :     :     :     :           :              +- *(15) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
      :     :     :     :           :                 +- Exchange hashpartitioning(d_date_sk#32, 5)
      :     :     :     :           :                    +- *(14) Project [d_date_sk#32, d_year#26]
      :     :     :     :           :                       +- *(14) Filter ((isnotnull(d_year#26) && (d_year#26 = 2002)) && isnotnull(d_date_sk#32))
      :     :     :     :           :                          +- *(14) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#32,d_year#26] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :     :     :           :- LocalTableScan <empty>, [customer_id#35, customer_first_name#39, customer_last_name#40, customer_preferred_cust_flag#41, customer_birth_country#42, customer_login#43, customer_email_address#44, year_total#36]
      :     :     :     :           +- LocalTableScan <empty>, [customer_id#37, customer_first_name#45, customer_last_name#46, customer_preferred_cust_flag#47, customer_birth_country#48, customer_login#49, customer_email_address#50, year_total#38]
      :     :     :     +- *(28) Sort [customer_id#18 ASC NULLS FIRST], false, 0
      :     :     :        +- Exchange hashpartitioning(customer_id#18, 5)
      :     :     :           +- Union
      :     :     :              :- LocalTableScan <empty>, [customer_id#18, year_total#10]
      :     :     :              :- *(27) Filter (isnotnull(year_total#36) && (year_total#36 > 0.000000))
      :     :     :              :  +- *(27) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :              :     +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :     :              :        +- *(26) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :     :              :           +- *(26) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51, d_year#26]
      :     :     :              :              +- *(26) SortMergeJoin [cs_sold_date_sk#55], [d_date_sk#32], Inner
      :     :     :              :                 :- *(23) Sort [cs_sold_date_sk#55 ASC NULLS FIRST], false, 0
      :     :     :              :                 :  +- Exchange hashpartitioning(cs_sold_date_sk#55, 5)
      :     :     :              :                 :     +- *(22) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_sold_date_sk#55, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51]
      :     :     :              :                 :        +- *(22) SortMergeJoin [c_customer_sk#33], [cs_bill_customer_sk#56], Inner
      :     :     :              :                 :           :- *(20) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :     :     :              :                 :           :  +- *(20) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :     :     :              :                 :           :     +- *(20) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_..., SelectedBucketsCount: 200 out of 200
      :     :     :              :                 :           +- *(21) Project [cs_sold_date_sk#55, cs_bill_customer_sk#56, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51]
      :     :     :              :                 :              +- *(21) Filter (isnotnull(cs_bill_customer_sk#56) && isnotnull(cs_sold_date_sk#55))
      :     :     :              :                 :                 +- *(21) FileScan Hyperspace(Type: CI, Name: JoinIndex28-index-23-cs_bill_customer_sk-12, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#55,cs_bill_customer_sk#56,cs_ext_discount_amt#53,cs_ext_sales_price#54,cs_ext_wholesale_cost#52,cs_ext_list_price#51] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_..., SelectedBucketsCount: 200 out of 200
      :     :     :              :                 +- *(25) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
      :     :     :              :                    +- ReusedExchange [d_date_sk#32, d_year#26], Exchange hashpartitioning(d_date_sk#32, 5)
      :     :     :              +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     :     +- *(38) Sort [customer_id#15 ASC NULLS FIRST], false, 0
      :     :        +- Exchange hashpartitioning(customer_id#15, 5)
      :     :           +- Union
      :     :              :- LocalTableScan <empty>, [customer_id#15, year_total#11]
      :     :              :- *(37) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :              :  +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :     :              :     +- *(36) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#51 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#52 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#53 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#54 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :     :              :        +- *(36) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51, d_year#26]
      :     :              :           +- *(36) SortMergeJoin [cs_sold_date_sk#55], [d_date_sk#32], Inner
      :     :              :              :- *(33) Sort [cs_sold_date_sk#55 ASC NULLS FIRST], false, 0
      :     :              :              :  +- ReusedExchange [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, cs_sold_date_sk#55, cs_ext_discount_amt#53, cs_ext_sales_price#54, cs_ext_wholesale_cost#52, cs_ext_list_price#51], Exchange hashpartitioning(cs_sold_date_sk#55, 5)
      :     :              :              +- *(35) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
      :     :              :                 +- ReusedExchange [d_date_sk#32, d_year#26], Exchange hashpartitioning(d_date_sk#32, 5)
      :     :              +- LocalTableScan <empty>, [customer_id#37, year_total#38]
      :     +- *(48) Sort [customer_id#14 ASC NULLS FIRST], false, 0
      :        +- Exchange hashpartitioning(customer_id#14, 5)
      :           +- Union
      :              :- LocalTableScan <empty>, [customer_id#14, year_total#12]
      :              :- LocalTableScan <empty>, [customer_id#35, year_total#36]
      :              +- *(47) Filter (isnotnull(year_total#38) && (year_total#38 > 0.000000))
      :                 +- *(47) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :                    +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
      :                       +- *(46) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
      :                          +- *(46) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57, d_year#26]
      :                             +- *(46) SortMergeJoin [ws_sold_date_sk#61], [d_date_sk#32], Inner
      :                                :- *(43) Sort [ws_sold_date_sk#61 ASC NULLS FIRST], false, 0
      :                                :  +- Exchange hashpartitioning(ws_sold_date_sk#61, 5)
      :                                :     +- *(42) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_sold_date_sk#61, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57]
      :                                :        +- *(42) SortMergeJoin [c_customer_sk#33], [ws_bill_customer_sk#62], Inner
      :                                :           :- *(40) Project [c_customer_sk#33, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
      :                                :           :  +- *(40) Filter (isnotnull(c_customer_sk#33) && isnotnull(c_customer_id#19))
      :                                :           :     +- *(40) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#33,c_customer_id#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_country#23,c_login#24,c_email_address#25] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_..., SelectedBucketsCount: 200 out of 200
      :                                :           +- *(41) Project [ws_sold_date_sk#61, ws_bill_customer_sk#62, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57]
      :                                :              +- *(41) Filter (isnotnull(ws_bill_customer_sk#62) && isnotnull(ws_sold_date_sk#61))
      :                                :                 +- *(41) FileScan Hyperspace(Type: CI, Name: JoinIndex39-index-30-ws_bill_customer_sk-10, LogVersion: 0) default.web_sales[ws_sold_date_sk#61,ws_bill_customer_sk#62,ws_ext_discount_amt#59,ws_ext_sales_price#60,ws_ext_wholesale_cost#58,ws_ext_list_price#57] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_..., SelectedBucketsCount: 200 out of 200
      :                                +- *(45) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
      :                                   +- ReusedExchange [d_date_sk#32, d_year#26], Exchange hashpartitioning(d_date_sk#32, 5)
      +- *(58) Sort [customer_id#9 ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(customer_id#9, 5)
            +- Union
               :- LocalTableScan <empty>, [customer_id#9, year_total#13]
               :- LocalTableScan <empty>, [customer_id#35, year_total#36]
               +- *(57) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
                  +- Exchange hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26, 5)
                     +- *(56) HashAggregate(keys=[c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#26], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#58 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#59 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#60 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))])
                        +- *(56) Project [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57, d_year#26]
                           +- *(56) SortMergeJoin [ws_sold_date_sk#61], [d_date_sk#32], Inner
                              :- *(53) Sort [ws_sold_date_sk#61 ASC NULLS FIRST], false, 0
                              :  +- ReusedExchange [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ws_sold_date_sk#61, ws_ext_discount_amt#59, ws_ext_sales_price#60, ws_ext_wholesale_cost#58, ws_ext_list_price#57], Exchange hashpartitioning(ws_sold_date_sk#61, 5)
                              +- *(55) Sort [d_date_sk#32 ASC NULLS FIRST], false, 0
                                 +- ReusedExchange [d_date_sk#32, d_year#26], Exchange hashpartitioning(d_date_sk#32, 5)