== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[ca_zip#1 ASC NULLS FIRST], output=[ca_zip#1,sum(cs_sales_price)#2])
+- *(12) HashAggregate(keys=[ca_zip#1], functions=[sum(UnscaledValue(cs_sales_price#3))])
   +- Exchange hashpartitioning(ca_zip#1, 5)
      +- *(11) HashAggregate(keys=[ca_zip#1], functions=[partial_sum(UnscaledValue(cs_sales_price#3))])
         +- *(11) Project [cs_sales_price#3, ca_zip#1]
            +- *(11) SortMergeJoin [cs_sold_date_sk#4], [d_date_sk#5], Inner
               :- *(8) Sort [cs_sold_date_sk#4 ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(cs_sold_date_sk#4, 5)
               :     +- *(7) Project [cs_sold_date_sk#4, cs_sales_price#3, ca_zip#1]
               :        +- *(7) SortMergeJoin [c_current_addr_sk#6], [ca_address_sk#7], Inner, ((substring(ca_zip#1, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) || ca_state#8 IN (CA,WA,GA)) || (cs_sales_price#3 > 500.00))
               :           :- *(4) Sort [c_current_addr_sk#6 ASC NULLS FIRST], false, 0
               :           :  +- Exchange hashpartitioning(c_current_addr_sk#6, 5)
               :           :     +- *(3) Project [cs_sold_date_sk#4, cs_sales_price#3, c_current_addr_sk#6]
               :           :        +- *(3) SortMergeJoin [cs_bill_customer_sk#9], [c_customer_sk#10], Inner
               :           :           :- *(1) Project [cs_sold_date_sk#4, cs_bill_customer_sk#9, cs_sales_price#3]
               :           :           :  +- *(1) Filter (isnotnull(cs_bill_customer_sk#9) && isnotnull(cs_sold_date_sk#4))
               :           :           :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex28-index-23-cs_bill_customer_sk-12, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#4,cs_bill_customer_sk#9,cs_sales_price#3] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :           :           +- *(2) Project [c_customer_sk#10, c_current_addr_sk#6]
               :           :              +- *(2) Filter (isnotnull(c_customer_sk#10) && isnotnull(c_current_addr_sk#6))
               :           :                 +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#10,c_current_addr_sk#6] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>, SelectedBucketsCount: 200 out of 200
               :           +- *(6) Sort [ca_address_sk#7 ASC NULLS FIRST], false, 0
               :              +- Exchange hashpartitioning(ca_address_sk#7, 5)
               :                 +- *(5) Project [ca_address_sk#7, ca_state#8, ca_zip#1]
               :                    +- *(5) Filter isnotnull(ca_address_sk#7)
               :                       +- *(5) FileScan Hyperspace(Type: CI, Name: JoinIndex31-index-7-ca_address_sk-11, LogVersion: 0) default.customer_address[ca_address_sk#7,ca_state#8,ca_zip#1] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>
               +- *(10) Sort [d_date_sk#5 ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(d_date_sk#5, 5)
                     +- *(9) Project [d_date_sk#5]
                        +- *(9) Filter ((((isnotnull(d_qoy#11) && isnotnull(d_year#12)) && (d_qoy#11 = 2)) && (d_year#12 = 2001)) && isnotnull(d_date_sk#5))
                           +- *(9) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#5,d_year#12,d_qoy#11] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>