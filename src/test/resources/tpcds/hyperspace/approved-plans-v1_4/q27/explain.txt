== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[i_item_id#1 ASC NULLS FIRST,s_state#2 ASC NULLS FIRST], output=[i_item_id#1,s_state#2,g_state#3,agg1#4,agg2#5,agg3#6,agg4#7])
+- *(16) HashAggregate(keys=[i_item_id#1, s_state#2, spark_grouping_id#8], functions=[avg(cast(ss_quantity#9 as bigint)), avg(UnscaledValue(ss_list_price#10)), avg(UnscaledValue(ss_coupon_amt#11)), avg(UnscaledValue(ss_sales_price#12))])
   +- Exchange hashpartitioning(i_item_id#1, s_state#2, spark_grouping_id#8, 5)
      +- *(15) HashAggregate(keys=[i_item_id#1, s_state#2, spark_grouping_id#8], functions=[partial_avg(cast(ss_quantity#9 as bigint)), partial_avg(UnscaledValue(ss_list_price#10)), partial_avg(UnscaledValue(ss_coupon_amt#11)), partial_avg(UnscaledValue(ss_sales_price#12))])
         +- *(15) Expand [List(ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, i_item_id#13, s_state#14, 0), List(ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, i_item_id#13, null, 1), List(ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, null, null, 3)], [ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, i_item_id#1, s_state#2, spark_grouping_id#8]
            +- *(15) Project [ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, i_item_id#15 AS i_item_id#13, s_state#16 AS s_state#14]
               +- *(15) SortMergeJoin [ss_item_sk#17], [i_item_sk#18], Inner
                  :- *(12) Sort [ss_item_sk#17 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(ss_item_sk#17, 5)
                  :     +- *(11) Project [ss_item_sk#17, ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11, s_state#16]
                  :        +- *(11) SortMergeJoin [ss_store_sk#19], [s_store_sk#20], Inner
                  :           :- *(8) Sort [ss_store_sk#19 ASC NULLS FIRST], false, 0
                  :           :  +- Exchange hashpartitioning(ss_store_sk#19, 5)
                  :           :     +- *(7) Project [ss_item_sk#17, ss_store_sk#19, ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11]
                  :           :        +- *(7) SortMergeJoin [ss_sold_date_sk#21], [d_date_sk#22], Inner
                  :           :           :- *(4) Sort [ss_sold_date_sk#21 ASC NULLS FIRST], false, 0
                  :           :           :  +- Exchange hashpartitioning(ss_sold_date_sk#21, 5)
                  :           :           :     +- *(3) Project [ss_sold_date_sk#21, ss_item_sk#17, ss_store_sk#19, ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11]
                  :           :           :        +- *(3) SortMergeJoin [ss_cdemo_sk#23], [cd_demo_sk#24], Inner
                  :           :           :           :- *(1) Project [ss_sold_date_sk#21, ss_item_sk#17, ss_cdemo_sk#23, ss_store_sk#19, ss_quantity#9, ss_list_price#10, ss_sales_price#12, ss_coupon_amt#11]
                  :           :           :           :  +- *(1) Filter (((isnotnull(ss_cdemo_sk#23) && isnotnull(ss_sold_date_sk#21)) && isnotnull(ss_store_sk#19)) && isnotnull(ss_item_sk#17))
                  :           :           :           :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex19-index-47-ss_cdemo_sk-16, LogVersion: 0) default.store_sales[ss_sold_date_sk#21,ss_item_sk#17,ss_cdemo_sk#23,ss_store_sk#19,ss_quantity#9,ss_list_price#10,ss_sales_price#12,ss_coupon_amt#11] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list..., SelectedBucketsCount: 200 out of 200
                  :           :           :           +- *(2) Project [cd_demo_sk#24]
                  :           :           :              +- *(2) Filter ((((((isnotnull(cd_education_status#25) && isnotnull(cd_marital_status#26)) && isnotnull(cd_gender#27)) && (cd_gender#27 = M)) && (cd_marital_status#26 = S)) && (cd_education_status#25 = College)) && isnotnull(cd_demo_sk#24))
                  :           :           :                 +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex25-index-18-cd_demo_sk-8, LogVersion: 0) default.customer_demographics[cd_demo_sk#24,cd_gender#27,cd_marital_status#26,cd_education_status#25] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cd_education_status), IsNotNull(cd_marital_status), IsNotNull(cd_gender), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>, SelectedBucketsCount: 200 out of 200
                  :           :           +- *(6) Sort [d_date_sk#22 ASC NULLS FIRST], false, 0
                  :           :              +- Exchange hashpartitioning(d_date_sk#22, 5)
                  :           :                 +- *(5) Project [d_date_sk#22]
                  :           :                    +- *(5) Filter ((isnotnull(d_year#28) && (d_year#28 = 2002)) && isnotnull(d_date_sk#22))
                  :           :                       +- *(5) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#22,d_year#28] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :           +- *(10) Sort [s_store_sk#20 ASC NULLS FIRST], false, 0
                  :              +- Exchange hashpartitioning(s_store_sk#20, 5)
                  :                 +- *(9) Project [s_store_sk#20, s_state#16]
                  :                    +- *(9) Filter ((isnotnull(s_state#16) && (s_state#16 = TN)) && isnotnull(s_store_sk#20))
                  :                       +- *(9) FileScan Hyperspace(Type: CI, Name: JoinIndex24-index-4-s_store_sk-15, LogVersion: 0) default.store[s_store_sk#20,s_state#16] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                  +- *(14) Sort [i_item_sk#18 ASC NULLS FIRST], false, 0
                     +- Exchange hashpartitioning(i_item_sk#18, 5)
                        +- *(13) Project [i_item_sk#18, i_item_id#15]
                           +- *(13) Filter isnotnull(i_item_sk#18)
                              +- *(13) FileScan Hyperspace(Type: CI, Name: FilterIndex09-index-32-i_item_sk-1, LogVersion: 0) default.item[i_item_sk#18,i_item_id#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>