== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[s_store_name#1 ASC NULLS FIRST,s_company_id#2 ASC NULLS FIRST,s_street_number#3 ASC NULLS FIRST,s_street_name#4 ASC NULLS FIRST,s_street_type#5 ASC NULLS FIRST,s_suite_number#6 ASC NULLS FIRST,s_city#7 ASC NULLS FIRST,s_county#8 ASC NULLS FIRST,s_state#9 ASC NULLS FIRST,s_zip#10 ASC NULLS FIRST], output=[s_store_name#1,s_company_id#2,s_street_number#3,s_street_name#4,s_street_type#5,s_suite_number#6,s_city#7,s_county#8,s_state#9,s_zip#10,30 days #11,31 - 60 days #12,61 - 90 days #13,91 - 120 days #14,>120 days #15])
+- *(18) HashAggregate(keys=[s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10], functions=[sum(cast(CASE WHEN ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 30) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 30) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 60)) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 60) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 90)) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 90) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 120)) THEN 1 ELSE 0 END as bigint)), sum(cast(CASE WHEN ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 120) THEN 1 ELSE 0 END as bigint))])
   +- Exchange hashpartitioning(s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10, 5)
      +- *(17) HashAggregate(keys=[s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10], functions=[partial_sum(cast(CASE WHEN ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 30) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 60) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 90) && ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((sr_returned_date_sk#16 - cast(ss_sold_date_sk#17 as bigint)) > 120) THEN 1 ELSE 0 END as bigint))])
         +- *(17) Project [ss_sold_date_sk#17, sr_returned_date_sk#16, s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10]
            +- *(17) SortMergeJoin [sr_returned_date_sk#16], [cast(d_date_sk#18 as bigint)], Inner
               :- *(14) Sort [sr_returned_date_sk#16 ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(sr_returned_date_sk#16, 5)
               :     +- *(13) Project [ss_sold_date_sk#17, sr_returned_date_sk#16, s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10]
               :        +- *(13) SortMergeJoin [ss_sold_date_sk#17], [d_date_sk#19], Inner
               :           :- *(10) Sort [ss_sold_date_sk#17 ASC NULLS FIRST], false, 0
               :           :  +- Exchange hashpartitioning(ss_sold_date_sk#17, 5)
               :           :     +- *(9) Project [ss_sold_date_sk#17, sr_returned_date_sk#16, s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10]
               :           :        +- *(9) SortMergeJoin [ss_store_sk#20], [s_store_sk#21], Inner
               :           :           :- *(6) Sort [ss_store_sk#20 ASC NULLS FIRST], false, 0
               :           :           :  +- Exchange hashpartitioning(ss_store_sk#20, 5)
               :           :           :     +- *(5) Project [ss_sold_date_sk#17, ss_store_sk#20, sr_returned_date_sk#16]
               :           :           :        +- *(5) SortMergeJoin [cast(ss_ticket_number#22 as bigint), cast(ss_item_sk#23 as bigint), cast(ss_customer_sk#24 as bigint)], [sr_ticket_number#25, sr_item_sk#26, sr_customer_sk#27], Inner
               :           :           :           :- *(2) Sort [cast(ss_ticket_number#22 as bigint) ASC NULLS FIRST, cast(ss_item_sk#23 as bigint) ASC NULLS FIRST, cast(ss_customer_sk#24 as bigint) ASC NULLS FIRST], false, 0
               :           :           :           :  +- Exchange hashpartitioning(cast(ss_ticket_number#22 as bigint), cast(ss_item_sk#23 as bigint), cast(ss_customer_sk#24 as bigint), 5)
               :           :           :           :     +- *(1) Project [ss_sold_date_sk#17, ss_item_sk#23, ss_customer_sk#24, ss_store_sk#20, ss_ticket_number#22]
               :           :           :           :        +- *(1) Filter ((((isnotnull(ss_item_sk#23) && isnotnull(ss_ticket_number#22)) && isnotnull(ss_customer_sk#24)) && isnotnull(ss_store_sk#20)) && isnotnull(ss_sold_date_sk#17))
               :           :           :           :           +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#17,ss_item_sk#23,ss_customer_sk#24,ss_store_sk#20,ss_ticket_number#22] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_customer_sk), IsNotNull(ss_stor..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int>
               :           :           :           +- *(4) Sort [sr_ticket_number#25 ASC NULLS FIRST, sr_item_sk#26 ASC NULLS FIRST, sr_customer_sk#27 ASC NULLS FIRST], false, 0
               :           :           :              +- Exchange hashpartitioning(sr_ticket_number#25, sr_item_sk#26, sr_customer_sk#27, 5)
               :           :           :                 +- *(3) Project [sr_returned_date_sk#16, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#25]
               :           :           :                    +- *(3) Filter (((isnotnull(sr_ticket_number#25) && isnotnull(sr_customer_sk#27)) && isnotnull(sr_item_sk#26)) && isnotnull(sr_returned_date_sk#16))
               :           :           :                       +- *(3) FileScan Hyperspace(Type: CI, Name: JoinIndex21-index-20-sr_item_sk-7, LogVersion: 0) default.store_returns[sr_returned_date_sk#16,sr_item_sk#26,sr_customer_sk#27,sr_ticket_number#25] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint>
               :           :           +- *(8) Sort [s_store_sk#21 ASC NULLS FIRST], false, 0
               :           :              +- Exchange hashpartitioning(s_store_sk#21, 5)
               :           :                 +- *(7) Project [s_store_sk#21, s_store_name#1, s_company_id#2, s_street_number#3, s_street_name#4, s_street_type#5, s_suite_number#6, s_city#7, s_county#8, s_state#9, s_zip#10]
               :           :                    +- *(7) Filter isnotnull(s_store_sk#21)
               :           :                       +- *(7) FileScan Hyperspace(Type: CI, Name: JoinIndex24-index-4-s_store_sk-15, LogVersion: 0) default.store[s_store_sk#21,s_store_name#1,s_company_id#2,s_street_number#3,s_street_name#4,s_street_type#5,s_suite_number#6,s_city#7,s_county#8,s_state#9,s_zip#10] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_id:int,s_street_number:string,s_street_name:s...
               :           +- *(12) Sort [d_date_sk#19 ASC NULLS FIRST], false, 0
               :              +- Exchange hashpartitioning(d_date_sk#19, 5)
               :                 +- *(11) Project [d_date_sk#19]
               :                    +- *(11) Filter isnotnull(d_date_sk#19)
               :                       +- *(11) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#19] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int>
               +- *(16) Sort [cast(d_date_sk#18 as bigint) ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(cast(d_date_sk#18 as bigint), 5)
                     +- *(15) Project [d_date_sk#18]
                        +- *(15) Filter ((((isnotnull(d_year#28) && isnotnull(d_moy#29)) && (d_year#28 = 2001)) && (d_moy#29 = 8)) && isnotnull(d_date_sk#18))
                           +- *(15) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#18,d_year#28,d_moy#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,8), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>