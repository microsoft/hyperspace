== Physical Plan ==
CollectLimit 100
+- CartesianProduct
   :- CartesianProduct
   :  :- CartesianProduct
   :  :  :- CartesianProduct
   :  :  :  :- CartesianProduct
   :  :  :  :  :- *(3) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
   :  :  :  :  :  +- Exchange SinglePartition
   :  :  :  :  :     +- *(2) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
   :  :  :  :  :        +- *(2) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
   :  :  :  :  :           +- Exchange hashpartitioning(ss_list_price#1, 5)
   :  :  :  :  :              +- *(1) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
   :  :  :  :  :                 +- *(1) Project [ss_list_price#1]
   :  :  :  :  :                    +- *(1) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 0)) && (ss_quantity#2 <= 5)) && ((((ss_list_price#1 >= 8.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 18.00)) || ((ss_coupon_amt#3 >= 459.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 1459.00))) || ((ss_wholesale_cost#4 >= 57.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 77.00))))
   :  :  :  :  :                       +- *(1) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,0), LessThanOrEqual(ss_quantity,5)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  :  +- *(6) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
   :  :  :  :     +- Exchange SinglePartition
   :  :  :  :        +- *(5) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
   :  :  :  :           +- *(5) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
   :  :  :  :              +- Exchange hashpartitioning(ss_list_price#1, 5)
   :  :  :  :                 +- *(4) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
   :  :  :  :                    +- *(4) Project [ss_list_price#1]
   :  :  :  :                       +- *(4) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 6)) && (ss_quantity#2 <= 10)) && ((((ss_list_price#1 >= 90.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 100.00)) || ((ss_coupon_amt#3 >= 2323.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 3323.00))) || ((ss_wholesale_cost#4 >= 31.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 51.00))))
   :  :  :  :                          +- *(4) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,6), LessThanOrEqual(ss_quantity,10)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  +- *(9) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
   :  :  :     +- Exchange SinglePartition
   :  :  :        +- *(8) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
   :  :  :           +- *(8) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
   :  :  :              +- Exchange hashpartitioning(ss_list_price#1, 5)
   :  :  :                 +- *(7) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
   :  :  :                    +- *(7) Project [ss_list_price#1]
   :  :  :                       +- *(7) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 11)) && (ss_quantity#2 <= 15)) && ((((ss_list_price#1 >= 142.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 152.00)) || ((ss_coupon_amt#3 >= 12214.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 13214.00))) || ((ss_wholesale_cost#4 >= 79.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 99.00))))
   :  :  :                          +- *(7) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,11), LessThanOrEqual(ss_quantity,15)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  +- *(12) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
   :  :     +- Exchange SinglePartition
   :  :        +- *(11) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
   :  :           +- *(11) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
   :  :              +- Exchange hashpartitioning(ss_list_price#1, 5)
   :  :                 +- *(10) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
   :  :                    +- *(10) Project [ss_list_price#1]
   :  :                       +- *(10) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 16)) && (ss_quantity#2 <= 20)) && ((((ss_list_price#1 >= 135.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 145.00)) || ((ss_coupon_amt#3 >= 6071.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 7071.00))) || ((ss_wholesale_cost#4 >= 38.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 58.00))))
   :  :                          +- *(10) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,16), LessThanOrEqual(ss_quantity,20)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  +- *(15) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
   :     +- Exchange SinglePartition
   :        +- *(14) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
   :           +- *(14) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
   :              +- Exchange hashpartitioning(ss_list_price#1, 5)
   :                 +- *(13) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
   :                    +- *(13) Project [ss_list_price#1]
   :                       +- *(13) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 21)) && (ss_quantity#2 <= 25)) && ((((ss_list_price#1 >= 122.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 132.00)) || ((ss_coupon_amt#3 >= 836.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 1836.00))) || ((ss_wholesale_cost#4 >= 17.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 37.00))))
   :                          +- *(13) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,25)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   +- *(18) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#1)), count(ss_list_price#1), count(distinct ss_list_price#1)])
      +- Exchange SinglePartition
         +- *(17) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1), partial_count(distinct ss_list_price#1)])
            +- *(17) HashAggregate(keys=[ss_list_price#1], functions=[merge_avg(UnscaledValue(ss_list_price#1)), merge_count(ss_list_price#1)])
               +- Exchange hashpartitioning(ss_list_price#1, 5)
                  +- *(16) HashAggregate(keys=[ss_list_price#1], functions=[partial_avg(UnscaledValue(ss_list_price#1)), partial_count(ss_list_price#1)])
                     +- *(16) Project [ss_list_price#1]
                        +- *(16) Filter (((isnotnull(ss_quantity#2) && (ss_quantity#2 >= 26)) && (ss_quantity#2 <= 30)) && ((((ss_list_price#1 >= 154.00) && (cast(ss_list_price#1 as decimal(12,2)) <= 164.00)) || ((ss_coupon_amt#3 >= 7326.00) && (cast(ss_coupon_amt#3 as decimal(12,2)) <= 8326.00))) || ((ss_wholesale_cost#4 >= 7.00) && (cast(ss_wholesale_cost#4 as decimal(12,2)) <= 27.00))))
                           +- *(16) FileScan parquet default.store_sales[ss_quantity#2,ss_wholesale_cost#4,ss_list_price#1,ss_coupon_amt#3] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,26), LessThanOrEqual(ss_quantity,30)], ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...