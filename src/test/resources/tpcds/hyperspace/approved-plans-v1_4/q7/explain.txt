== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[i_item_id#1 ASC NULLS FIRST], output=[i_item_id#1,agg1#2,agg2#3,agg3#4,agg4#5])
+- *(16) HashAggregate(keys=[i_item_id#1], functions=[avg(cast(ss_quantity#6 as bigint)), avg(UnscaledValue(ss_list_price#7)), avg(UnscaledValue(ss_coupon_amt#8)), avg(UnscaledValue(ss_sales_price#9))])
   +- Exchange hashpartitioning(i_item_id#1, 5)
      +- *(15) HashAggregate(keys=[i_item_id#1], functions=[partial_avg(cast(ss_quantity#6 as bigint)), partial_avg(UnscaledValue(ss_list_price#7)), partial_avg(UnscaledValue(ss_coupon_amt#8)), partial_avg(UnscaledValue(ss_sales_price#9))])
         +- *(15) Project [ss_quantity#6, ss_list_price#7, ss_sales_price#9, ss_coupon_amt#8, i_item_id#1]
            +- *(15) SortMergeJoin [ss_promo_sk#10], [p_promo_sk#11], Inner
               :- *(12) Sort [ss_promo_sk#10 ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(ss_promo_sk#10, 5)
               :     +- *(11) Project [ss_promo_sk#10, ss_quantity#6, ss_list_price#7, ss_sales_price#9, ss_coupon_amt#8, i_item_id#1]
               :        +- *(11) SortMergeJoin [ss_item_sk#12], [i_item_sk#13], Inner
               :           :- *(8) Sort [ss_item_sk#12 ASC NULLS FIRST], false, 0
               :           :  +- Exchange hashpartitioning(ss_item_sk#12, 5)
               :           :     +- *(7) Project [ss_item_sk#12, ss_promo_sk#10, ss_quantity#6, ss_list_price#7, ss_sales_price#9, ss_coupon_amt#8]
               :           :        +- *(7) SortMergeJoin [ss_sold_date_sk#14], [d_date_sk#15], Inner
               :           :           :- *(4) Sort [ss_sold_date_sk#14 ASC NULLS FIRST], false, 0
               :           :           :  +- Exchange hashpartitioning(ss_sold_date_sk#14, 5)
               :           :           :     +- *(3) Project [ss_sold_date_sk#14, ss_item_sk#12, ss_promo_sk#10, ss_quantity#6, ss_list_price#7, ss_sales_price#9, ss_coupon_amt#8]
               :           :           :        +- *(3) SortMergeJoin [ss_cdemo_sk#16], [cd_demo_sk#17], Inner
               :           :           :           :- *(1) Project [ss_sold_date_sk#14, ss_item_sk#12, ss_cdemo_sk#16, ss_promo_sk#10, ss_quantity#6, ss_list_price#7, ss_sales_price#9, ss_coupon_amt#8]
               :           :           :           :  +- *(1) Filter (((isnotnull(ss_cdemo_sk#16) && isnotnull(ss_sold_date_sk#14)) && isnotnull(ss_item_sk#12)) && isnotnull(ss_promo_sk#10))
               :           :           :           :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex19-index-47-ss_cdemo_sk-16, LogVersion: 0) default.store_sales[ss_sold_date_sk#14,ss_item_sk#12,ss_cdemo_sk#16,ss_promo_sk#10,ss_quantity#6,ss_list_price#7,ss_sales_price#9,ss_coupon_amt#8] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_promo_sk:int,ss_quantity:int,ss_list..., SelectedBucketsCount: 200 out of 200
               :           :           :           +- *(2) Project [cd_demo_sk#17]
               :           :           :              +- *(2) Filter ((((((isnotnull(cd_education_status#18) && isnotnull(cd_marital_status#19)) && isnotnull(cd_gender#20)) && (cd_gender#20 = M)) && (cd_marital_status#19 = S)) && (cd_education_status#18 = College)) && isnotnull(cd_demo_sk#17))
               :           :           :                 +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex25-index-18-cd_demo_sk-8, LogVersion: 0) default.customer_demographics[cd_demo_sk#17,cd_gender#20,cd_marital_status#19,cd_education_status#18] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cd_education_status), IsNotNull(cd_marital_status), IsNotNull(cd_gender), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>, SelectedBucketsCount: 200 out of 200
               :           :           +- *(6) Sort [d_date_sk#15 ASC NULLS FIRST], false, 0
               :           :              +- Exchange hashpartitioning(d_date_sk#15, 5)
               :           :                 +- *(5) Project [d_date_sk#15]
               :           :                    +- *(5) Filter ((isnotnull(d_year#21) && (d_year#21 = 2000)) && isnotnull(d_date_sk#15))
               :           :                       +- *(5) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#15,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
               :           +- *(10) Sort [i_item_sk#13 ASC NULLS FIRST], false, 0
               :              +- Exchange hashpartitioning(i_item_sk#13, 5)
               :                 +- *(9) Project [i_item_sk#13, i_item_id#1]
               :                    +- *(9) Filter isnotnull(i_item_sk#13)
               :                       +- *(9) FileScan Hyperspace(Type: CI, Name: FilterIndex09-index-32-i_item_sk-1, LogVersion: 0) default.item[i_item_sk#13,i_item_id#1] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
               +- *(14) Sort [p_promo_sk#11 ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(p_promo_sk#11, 5)
                     +- *(13) Project [p_promo_sk#11]
                        +- *(13) Filter (((p_channel_email#22 = N) || (p_channel_event#23 = N)) && isnotnull(p_promo_sk#11))
                           +- *(13) FileScan Hyperspace(Type: CI, Name: JoinIndex49-index-40-p_promo_sk-4, LogVersion: 0) default.promotion[p_promo_sk#11,p_channel_email#22,p_channel_event#23] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>