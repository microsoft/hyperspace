== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[c_last_name#1 ASC NULLS FIRST,c_first_name#2 ASC NULLS FIRST,sales#3 ASC NULLS FIRST], output=[c_last_name#1,c_first_name#2,sales#3])
+- Union
   :- *(28) HashAggregate(keys=[c_last_name#1, c_first_name#2], functions=[sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2)))])
   :  +- Exchange hashpartitioning(c_last_name#1, c_first_name#2, 5)
   :     +- *(27) HashAggregate(keys=[c_last_name#1, c_first_name#2], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2)))])
   :        +- *(27) Project [cs_quantity#4, cs_list_price#5, c_first_name#2, c_last_name#1]
   :           +- *(27) SortMergeJoin [cs_sold_date_sk#6], [d_date_sk#7], Inner
   :              :- *(24) Sort [cs_sold_date_sk#6 ASC NULLS FIRST], false, 0
   :              :  +- Exchange hashpartitioning(cs_sold_date_sk#6, 5)
   :              :     +- *(23) Project [cs_sold_date_sk#6, cs_quantity#4, cs_list_price#5, c_first_name#2, c_last_name#1]
   :              :        +- *(23) SortMergeJoin [cs_bill_customer_sk#8], [c_customer_sk#9], Inner
   :              :           :- SortMergeJoin [cs_bill_customer_sk#8], [c_customer_sk#9#10], LeftSemi
   :              :           :  :- *(12) Sort [cs_bill_customer_sk#8 ASC NULLS FIRST], false, 0
   :              :           :  :  +- Exchange hashpartitioning(cs_bill_customer_sk#8, 5)
   :              :           :  :     +- *(11) Project [cs_sold_date_sk#6, cs_bill_customer_sk#8, cs_quantity#4, cs_list_price#5]
   :              :           :  :        +- SortMergeJoin [cs_item_sk#11], [item_sk#12], LeftSemi
   :              :           :  :           :- *(2) Sort [cs_item_sk#11 ASC NULLS FIRST], false, 0
   :              :           :  :           :  +- Exchange hashpartitioning(cs_item_sk#11, 5)
   :              :           :  :           :     +- *(1) Project [cs_sold_date_sk#6, cs_bill_customer_sk#8, cs_item_sk#11, cs_quantity#4, cs_list_price#5]
   :              :           :  :           :        +- *(1) Filter (isnotnull(cs_bill_customer_sk#8) && isnotnull(cs_sold_date_sk#6))
   :              :           :  :           :           +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex26-index-6-cs_sold_date_sk-26, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#6,cs_bill_customer_sk#8,cs_item_sk#11,cs_quantity#4,cs_list_price#5] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
   :              :           :  :           +- *(10) Sort [item_sk#12 ASC NULLS FIRST], false, 0
   :              :           :  :              +- Exchange hashpartitioning(item_sk#12, 5)
   :              :           :  :                 +- *(9) Project [item_sk#12]
   :              :           :  :                    +- *(9) Filter (count(1)#13 > 4)
   :              :           :  :                       +- *(9) HashAggregate(keys=[substring(i_item_desc#14, 1, 30)#15, i_item_sk#16, d_date#17], functions=[count(1)])
   :              :           :  :                          +- *(9) HashAggregate(keys=[substring(i_item_desc#14, 1, 30) AS substring(i_item_desc#14, 1, 30)#15, i_item_sk#16, d_date#17], functions=[partial_count(1)])
   :              :           :  :                             +- *(9) Project [d_date#17, i_item_sk#16, i_item_desc#14]
   :              :           :  :                                +- *(9) SortMergeJoin [ss_item_sk#18], [i_item_sk#16], Inner
   :              :           :  :                                   :- *(6) Sort [ss_item_sk#18 ASC NULLS FIRST], false, 0
   :              :           :  :                                   :  +- Exchange hashpartitioning(ss_item_sk#18, 5)
   :              :           :  :                                   :     +- *(5) Project [ss_item_sk#18, d_date#17]
   :              :           :  :                                   :        +- *(5) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#7], Inner
   :              :           :  :                                   :           :- *(3) Project [ss_sold_date_sk#19, ss_item_sk#18]
   :              :           :  :                                   :           :  +- *(3) Filter (isnotnull(ss_sold_date_sk#19) && isnotnull(ss_item_sk#18))
   :              :           :  :                                   :           :     +- *(3) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_item_sk#18] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>, SelectedBucketsCount: 200 out of 200
   :              :           :  :                                   :           +- *(4) Project [d_date_sk#7, d_date#17]
   :              :           :  :                                   :              +- *(4) Filter (d_year#20 IN (2000,2001,2002,2003) && isnotnull(d_date_sk#7))
   :              :           :  :                                   :                 +- *(4) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#7,d_date#17,d_year#20] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>, SelectedBucketsCount: 200 out of 200
   :              :           :  :                                   +- *(8) Sort [i_item_sk#16 ASC NULLS FIRST], false, 0
   :              :           :  :                                      +- Exchange hashpartitioning(i_item_sk#16, 5)
   :              :           :  :                                         +- *(7) Project [i_item_sk#16, i_item_desc#14]
   :              :           :  :                                            +- *(7) Filter isnotnull(i_item_sk#16)
   :              :           :  :                                               +- *(7) FileScan Hyperspace(Type: CI, Name: JoinIndex08-index-2-i_item_sk-17, LogVersion: 0) default.item[i_item_sk#16,i_item_desc#14] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
   :              :           :  +- *(16) Sort [c_customer_sk#9#10 ASC NULLS FIRST], false, 0
   :              :           :     +- Exchange hashpartitioning(c_customer_sk#9#10, 5)
   :              :           :        +- *(15) Project [c_customer_sk#9 AS c_customer_sk#9#10]
   :              :           :           +- *(15) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))#23) && (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))#23 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery4279 as decimal(32,6)))), DecimalType(38,8))))
   :              :           :              :  +- Subquery subquery4279
   :              :           :              :     +- *(9) HashAggregate(keys=[], functions=[max(csales#24)])
   :              :           :              :        +- Exchange SinglePartition
   :              :           :              :           +- *(8) HashAggregate(keys=[], functions=[partial_max(csales#24)])
   :              :           :              :              +- *(8) HashAggregate(keys=[c_customer_sk#9], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))])
   :              :           :              :                 +- Exchange hashpartitioning(c_customer_sk#9, 5)
   :              :           :              :                    +- *(7) HashAggregate(keys=[c_customer_sk#9], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))])
   :              :           :              :                       +- *(7) Project [ss_quantity#21, ss_sales_price#22, c_customer_sk#9]
   :              :           :              :                          +- *(7) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#7], Inner
   :              :           :              :                             :- *(4) Sort [ss_sold_date_sk#19 ASC NULLS FIRST], false, 0
   :              :           :              :                             :  +- Exchange hashpartitioning(ss_sold_date_sk#19, 5)
   :              :           :              :                             :     +- *(3) Project [ss_sold_date_sk#19, ss_quantity#21, ss_sales_price#22, c_customer_sk#9]
   :              :           :              :                             :        +- *(3) SortMergeJoin [ss_customer_sk#25], [c_customer_sk#9], Inner
   :              :           :              :                             :           :- *(1) Project [ss_sold_date_sk#19, ss_customer_sk#25, ss_quantity#21, ss_sales_price#22]
   :              :           :              :                             :           :  +- *(1) Filter (isnotnull(ss_customer_sk#25) && isnotnull(ss_sold_date_sk#19))
   :              :           :              :                             :           :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex15-index-12-ss_customer_sk-20, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_customer_sk#25,ss_quantity#21,ss_sales_price#22] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
   :              :           :              :                             :           +- *(2) Project [c_customer_sk#9]
   :              :           :              :                             :              +- *(2) Filter isnotnull(c_customer_sk#9)
   :              :           :              :                             :                 +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#9] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>, SelectedBucketsCount: 200 out of 200
   :              :           :              :                             +- *(6) Sort [d_date_sk#7 ASC NULLS FIRST], false, 0
   :              :           :              :                                +- Exchange hashpartitioning(d_date_sk#7, 5)
   :              :           :              :                                   +- *(5) Project [d_date_sk#7]
   :              :           :              :                                      +- *(5) Filter (d_year#20 IN (2000,2001,2002,2003) && isnotnull(d_date_sk#7))
   :              :           :              :                                         +- *(5) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#7,d_year#20] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
   :              :           :              +- *(15) HashAggregate(keys=[c_customer_sk#9], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))])
   :              :           :                 +- *(15) HashAggregate(keys=[c_customer_sk#9], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#21 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#22 as decimal(12,2)))), DecimalType(18,2)))])
   :              :           :                    +- *(15) Project [ss_quantity#21, ss_sales_price#22, c_customer_sk#9]
   :              :           :                       +- *(15) SortMergeJoin [ss_customer_sk#25], [c_customer_sk#9], Inner
   :              :           :                          :- *(13) Project [ss_customer_sk#25, ss_quantity#21, ss_sales_price#22]
   :              :           :                          :  +- *(13) Filter isnotnull(ss_customer_sk#25)
   :              :           :                          :     +- *(13) FileScan Hyperspace(Type: CI, Name: JoinIndex15-index-12-ss_customer_sk-20, LogVersion: 0) default.store_sales[ss_customer_sk#25,ss_quantity#21,ss_sales_price#22] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
   :              :           :                          +- *(14) Project [c_customer_sk#9]
   :              :           :                             +- *(14) Filter isnotnull(c_customer_sk#9)
   :              :           :                                +- *(14) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#9] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>, SelectedBucketsCount: 200 out of 200
   :              :           +- SortMergeJoin [c_customer_sk#9], [c_customer_sk#9#10], LeftSemi
   :              :              :- *(18) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0
   :              :              :  +- Exchange hashpartitioning(c_customer_sk#9, 5)
   :              :              :     +- *(17) Project [c_customer_sk#9, c_first_name#2, c_last_name#1]
   :              :              :        +- *(17) Filter isnotnull(c_customer_sk#9)
   :              :              :           +- *(17) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#9,c_first_name#2,c_last_name#1] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
   :              :              +- *(22) Sort [c_customer_sk#9#10 ASC NULLS FIRST], false, 0
   :              :                 +- ReusedExchange [c_customer_sk#9#10], Exchange hashpartitioning(c_customer_sk#9#10, 5)
   :              +- *(26) Sort [d_date_sk#7 ASC NULLS FIRST], false, 0
   :                 +- Exchange hashpartitioning(d_date_sk#7, 5)
   :                    +- *(25) Project [d_date_sk#7]
   :                       +- *(25) Filter ((((isnotnull(d_year#20) && isnotnull(d_moy#26)) && (d_year#20 = 2000)) && (d_moy#26 = 2)) && isnotnull(d_date_sk#7))
   :                          +- *(25) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#7,d_year#20,d_moy#26] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
   +- *(56) HashAggregate(keys=[c_last_name#1, c_first_name#2], functions=[sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#28 as decimal(12,2)))), DecimalType(18,2)))])
      +- Exchange hashpartitioning(c_last_name#1, c_first_name#2, 5)
         +- *(55) HashAggregate(keys=[c_last_name#1, c_first_name#2], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#28 as decimal(12,2)))), DecimalType(18,2)))])
            +- *(55) Project [ws_quantity#27, ws_list_price#28, c_first_name#2, c_last_name#1]
               +- *(55) SortMergeJoin [ws_sold_date_sk#29], [d_date_sk#7], Inner
                  :- *(52) Sort [ws_sold_date_sk#29 ASC NULLS FIRST], false, 0
                  :  +- Exchange hashpartitioning(ws_sold_date_sk#29, 5)
                  :     +- *(51) Project [ws_sold_date_sk#29, ws_quantity#27, ws_list_price#28, c_first_name#2, c_last_name#1]
                  :        +- *(51) SortMergeJoin [ws_bill_customer_sk#30], [c_customer_sk#9], Inner
                  :           :- SortMergeJoin [ws_bill_customer_sk#30], [c_customer_sk#9#31], LeftSemi
                  :           :  :- *(40) Sort [ws_bill_customer_sk#30 ASC NULLS FIRST], false, 0
                  :           :  :  +- Exchange hashpartitioning(ws_bill_customer_sk#30, 5)
                  :           :  :     +- *(39) Project [ws_sold_date_sk#29, ws_bill_customer_sk#30, ws_quantity#27, ws_list_price#28]
                  :           :  :        +- SortMergeJoin [ws_item_sk#32], [item_sk#12], LeftSemi
                  :           :  :           :- *(30) Sort [ws_item_sk#32 ASC NULLS FIRST], false, 0
                  :           :  :           :  +- Exchange hashpartitioning(ws_item_sk#32, 5)
                  :           :  :           :     +- *(29) Project [ws_sold_date_sk#29, ws_item_sk#32, ws_bill_customer_sk#30, ws_quantity#27, ws_list_price#28]
                  :           :  :           :        +- *(29) Filter (isnotnull(ws_bill_customer_sk#30) && isnotnull(ws_sold_date_sk#29))
                  :           :  :           :           +- *(29) FileScan Hyperspace(Type: CI, Name: JoinIndex37-index-9-ws_sold_date_sk-21, LogVersion: 0) default.web_sales[ws_sold_date_sk#29,ws_item_sk#32,ws_bill_customer_sk#30,ws_quantity#27,ws_list_price#28] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                  :           :  :           +- *(38) Sort [item_sk#12 ASC NULLS FIRST], false, 0
                  :           :  :              +- ReusedExchange [item_sk#12], Exchange hashpartitioning(item_sk#12, 5)
                  :           :  +- *(44) Sort [c_customer_sk#9#31 ASC NULLS FIRST], false, 0
                  :           :     +- ReusedExchange [c_customer_sk#9#31], Exchange hashpartitioning(c_customer_sk#9#10, 5)
                  :           +- SortMergeJoin [c_customer_sk#9], [c_customer_sk#9#31], LeftSemi
                  :              :- *(46) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0
                  :              :  +- ReusedExchange [c_customer_sk#9, c_first_name#2, c_last_name#1], Exchange hashpartitioning(c_customer_sk#9, 5)
                  :              +- *(50) Sort [c_customer_sk#9#31 ASC NULLS FIRST], false, 0
                  :                 +- ReusedExchange [c_customer_sk#9#31], Exchange hashpartitioning(c_customer_sk#9#10, 5)
                  +- *(54) Sort [d_date_sk#7 ASC NULLS FIRST], false, 0
                     +- ReusedExchange [d_date_sk#7], Exchange hashpartitioning(d_date_sk#7, 5)