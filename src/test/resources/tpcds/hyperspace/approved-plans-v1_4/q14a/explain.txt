== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[channel#1 ASC NULLS FIRST,i_brand_id#2 ASC NULLS FIRST,i_class_id#3 ASC NULLS FIRST,i_category_id#4 ASC NULLS FIRST], output=[channel#1,i_brand_id#2,i_class_id#3,i_category_id#4,sum(sales)#5,sum(number_sales)#6])
+- *(230) HashAggregate(keys=[channel#1, i_brand_id#2, i_class_id#3, i_category_id#4, spark_grouping_id#7], functions=[sum(sales#8), sum(number_sales#9)])
   +- Exchange hashpartitioning(channel#1, i_brand_id#2, i_class_id#3, i_category_id#4, spark_grouping_id#7, 5)
      +- *(229) HashAggregate(keys=[channel#1, i_brand_id#2, i_class_id#3, i_category_id#4, spark_grouping_id#7], functions=[partial_sum(sales#8), partial_sum(number_sales#9)])
         +- *(229) Expand [List(sales#8, number_sales#9, channel#10, i_brand_id#11, i_class_id#12, i_category_id#13, 0), List(sales#8, number_sales#9, channel#10, i_brand_id#11, i_class_id#12, null, 1), List(sales#8, number_sales#9, channel#10, i_brand_id#11, null, null, 3), List(sales#8, number_sales#9, channel#10, null, null, null, 7), List(sales#8, number_sales#9, null, null, null, null, 15)], [sales#8, number_sales#9, channel#1, i_brand_id#2, i_class_id#3, i_category_id#4, spark_grouping_id#7]
            +- Union
               :- *(76) Project [sales#8, number_sales#9, channel#10, i_brand_id#11, i_class_id#12, i_category_id#13]
               :  +- *(76) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#14 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#15 as decimal(12,2)))), DecimalType(18,2)))#16) && (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#14 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#15 as decimal(12,2)))), DecimalType(18,2)))#16 as decimal(32,6)) > cast(Subquery subquery2807 as decimal(32,6))))
               :     :  +- Subquery subquery2807
               :     :     +- *(11) HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
               :     :        +- Exchange SinglePartition
               :     :           +- *(10) HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
               :     :              +- Union
               :     :                 :- *(3) Project [ss_quantity#14 AS quantity#17, ss_list_price#15 AS list_price#18]
               :     :                 :  +- *(3) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#20], Inner
               :     :                 :     :- *(1) Project [ss_sold_date_sk#19, ss_quantity#14, ss_list_price#15]
               :     :                 :     :  +- *(1) Filter isnotnull(ss_sold_date_sk#19)
               :     :                 :     :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_quantity#14,ss_list_price#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                 :     +- *(2) Project [d_date_sk#20]
               :     :                 :        +- *(2) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                 :           +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     :                 :- *(6) Project [cs_quantity#22 AS quantity#23, cs_list_price#24 AS list_price#25]
               :     :                 :  +- *(6) SortMergeJoin [cs_sold_date_sk#26], [d_date_sk#20], Inner
               :     :                 :     :- *(4) Project [cs_sold_date_sk#26, cs_quantity#22, cs_list_price#24]
               :     :                 :     :  +- *(4) Filter isnotnull(cs_sold_date_sk#26)
               :     :                 :     :     +- *(4) FileScan Hyperspace(Type: CI, Name: JoinIndex26-index-6-cs_sold_date_sk-26, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#26,cs_quantity#22,cs_list_price#24] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                 :     +- *(5) Project [d_date_sk#20]
               :     :                 :        +- *(5) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                 :           +- *(5) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     :                 +- *(9) Project [ws_quantity#27 AS quantity#28, ws_list_price#29 AS list_price#30]
               :     :                    +- *(9) SortMergeJoin [ws_sold_date_sk#31], [d_date_sk#20], Inner
               :     :                       :- *(7) Project [ws_sold_date_sk#31, ws_quantity#27, ws_list_price#29]
               :     :                       :  +- *(7) Filter isnotnull(ws_sold_date_sk#31)
               :     :                       :     +- *(7) FileScan Hyperspace(Type: CI, Name: JoinIndex37-index-9-ws_sold_date_sk-21, LogVersion: 0) default.web_sales[ws_sold_date_sk#31,ws_quantity#27,ws_list_price#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                       +- *(8) Project [d_date_sk#20]
               :     :                          +- *(8) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                             +- *(8) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     +- *(76) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#14 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#15 as decimal(12,2)))), DecimalType(18,2))), count(1)])
               :        +- Exchange hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5)
               :           +- *(75) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#14 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#15 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)])
               :              +- *(75) Project [ss_quantity#14, ss_list_price#15, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                 +- *(75) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#20], Inner
               :                    :- *(72) Sort [ss_sold_date_sk#19 ASC NULLS FIRST], false, 0
               :                    :  +- Exchange hashpartitioning(ss_sold_date_sk#19, 5)
               :                    :     +- *(71) Project [ss_sold_date_sk#19, ss_quantity#14, ss_list_price#15, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :        +- *(71) SortMergeJoin [ss_item_sk#32], [i_item_sk#33], Inner
               :                    :           :- SortMergeJoin [ss_item_sk#32], [ss_item_sk#34], LeftSemi
               :                    :           :  :- *(2) Sort [ss_item_sk#32 ASC NULLS FIRST], false, 0
               :                    :           :  :  +- Exchange hashpartitioning(ss_item_sk#32, 5)
               :                    :           :  :     +- *(1) Project [ss_sold_date_sk#19, ss_item_sk#32, ss_quantity#14, ss_list_price#15]
               :                    :           :  :        +- *(1) Filter (isnotnull(ss_item_sk#32) && isnotnull(ss_sold_date_sk#19))
               :                    :           :  :           +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_item_sk#32,ss_quantity#14,ss_list_price#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
               :                    :           :  +- *(35) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
               :                    :           :     +- Exchange hashpartitioning(ss_item_sk#34, 5)
               :                    :           :        +- *(34) Project [i_item_sk#33 AS ss_item_sk#34]
               :                    :           :           +- *(34) SortMergeJoin [i_brand_id#11, i_class_id#12, i_category_id#13], [brand_id#35, class_id#36, category_id#37], Inner
               :                    :           :              :- *(4) Sort [i_brand_id#11 ASC NULLS FIRST, i_class_id#12 ASC NULLS FIRST, i_category_id#13 ASC NULLS FIRST], false, 0
               :                    :           :              :  +- Exchange hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5)
               :                    :           :              :     +- *(3) Project [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :              :        +- *(3) Filter ((isnotnull(i_category_id#13) && isnotnull(i_brand_id#11)) && isnotnull(i_class_id#12))
               :                    :           :              :           +- *(3) FileScan parquet default.item[i_item_sk#33,i_brand_id#11,i_class_id#12,i_category_id#13] Batched: true, Format: Parquet, Location [not included in comparison]/{warehouse_dir}/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category_id), IsNotNull(i_brand_id), IsNotNull(i_class_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
               :                    :           :              +- *(33) Sort [brand_id#35 ASC NULLS FIRST, class_id#36 ASC NULLS FIRST, category_id#37 ASC NULLS FIRST], false, 0
               :                    :           :                 +- *(33) HashAggregate(keys=[brand_id#35, class_id#36, category_id#37], functions=[])
               :                    :           :                    +- Exchange hashpartitioning(brand_id#35, class_id#36, category_id#37, 5)
               :                    :           :                       +- *(32) HashAggregate(keys=[brand_id#35, class_id#36, category_id#37], functions=[])
               :                    :           :                          +- SortMergeJoin [coalesce(brand_id#35, 0), coalesce(class_id#36, 0), coalesce(category_id#37, 0)], [coalesce(i_brand_id#11, 0), coalesce(i_class_id#12, 0), coalesce(i_category_id#13, 0)], LeftSemi, (((brand_id#35 <=> i_brand_id#11) && (class_id#36 <=> i_class_id#12)) && (category_id#37 <=> i_category_id#13))
               :                    :           :                             :- *(23) Sort [coalesce(brand_id#35, 0) ASC NULLS FIRST, coalesce(class_id#36, 0) ASC NULLS FIRST, coalesce(category_id#37, 0) ASC NULLS FIRST], false, 0
               :                    :           :                             :  +- Exchange hashpartitioning(coalesce(brand_id#35, 0), coalesce(class_id#36, 0), coalesce(category_id#37, 0), 5)
               :                    :           :                             :     +- *(22) HashAggregate(keys=[brand_id#35, class_id#36, category_id#37], functions=[])
               :                    :           :                             :        +- Exchange hashpartitioning(brand_id#35, class_id#36, category_id#37, 5)
               :                    :           :                             :           +- *(21) HashAggregate(keys=[brand_id#35, class_id#36, category_id#37], functions=[])
               :                    :           :                             :              +- SortMergeJoin [coalesce(brand_id#35, 0), coalesce(class_id#36, 0), coalesce(category_id#37, 0)], [coalesce(i_brand_id#11, 0), coalesce(i_class_id#12, 0), coalesce(i_category_id#13, 0)], LeftSemi, (((brand_id#35 <=> i_brand_id#11) && (class_id#36 <=> i_class_id#12)) && (category_id#37 <=> i_category_id#13))
               :                    :           :                             :                 :- *(12) Sort [coalesce(brand_id#35, 0) ASC NULLS FIRST, coalesce(class_id#36, 0) ASC NULLS FIRST, coalesce(category_id#37, 0) ASC NULLS FIRST], false, 0
               :                    :           :                             :                 :  +- Exchange hashpartitioning(coalesce(brand_id#35, 0), coalesce(class_id#36, 0), coalesce(category_id#37, 0), 5)
               :                    :           :                             :                 :     +- *(11) Project [i_brand_id#11 AS brand_id#35, i_class_id#12 AS class_id#36, i_category_id#13 AS category_id#37]
               :                    :           :                             :                 :        +- *(11) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#20], Inner
               :                    :           :                             :                 :           :- *(8) Sort [ss_sold_date_sk#19 ASC NULLS FIRST], false, 0
               :                    :           :                             :                 :           :  +- Exchange hashpartitioning(ss_sold_date_sk#19, 5)
               :                    :           :                             :                 :           :     +- *(7) Project [ss_sold_date_sk#19, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                             :                 :           :        +- *(7) SortMergeJoin [ss_item_sk#32], [i_item_sk#33], Inner
               :                    :           :                             :                 :           :           :- *(5) Project [ss_sold_date_sk#19, ss_item_sk#32]
               :                    :           :                             :                 :           :           :  +- *(5) Filter (isnotnull(ss_item_sk#32) && isnotnull(ss_sold_date_sk#19))
               :                    :           :                             :                 :           :           :     +- *(5) FileScan Hyperspace(Type: CI, Name: JoinIndex13-index-3-ss_item_sk-16, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_item_sk#32] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                             :                 :           :           +- *(6) Project [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                             :                 :           :              +- *(6) Filter (((isnotnull(i_item_sk#33) && isnotnull(i_category_id#13)) && isnotnull(i_class_id#12)) && isnotnull(i_brand_id#11))
               :                    :           :                             :                 :           :                 +- *(6) FileScan Hyperspace(Type: CI, Name: JoinIndex08-index-2-i_item_sk-17, LogVersion: 0) default.item[i_item_sk#33,i_brand_id#11,i_class_id#12,i_category_id#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category_id), IsNotNull(i_class_id), IsNotNull(i_brand_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                             :                 :           +- *(10) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
               :                    :           :                             :                 :              +- Exchange hashpartitioning(d_date_sk#20, 5)
               :                    :           :                             :                 :                 +- *(9) Project [d_date_sk#20]
               :                    :           :                             :                 :                    +- *(9) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :                    :           :                             :                 :                       +- *(9) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
               :                    :           :                             :                 +- *(20) Sort [coalesce(i_brand_id#11, 0) ASC NULLS FIRST, coalesce(i_class_id#12, 0) ASC NULLS FIRST, coalesce(i_category_id#13, 0) ASC NULLS FIRST], false, 0
               :                    :           :                             :                    +- Exchange hashpartitioning(coalesce(i_brand_id#11, 0), coalesce(i_class_id#12, 0), coalesce(i_category_id#13, 0), 5)
               :                    :           :                             :                       +- *(19) Project [i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                             :                          +- *(19) SortMergeJoin [cs_sold_date_sk#26], [d_date_sk#20], Inner
               :                    :           :                             :                             :- *(16) Sort [cs_sold_date_sk#26 ASC NULLS FIRST], false, 0
               :                    :           :                             :                             :  +- Exchange hashpartitioning(cs_sold_date_sk#26, 5)
               :                    :           :                             :                             :     +- *(15) Project [cs_sold_date_sk#26, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                             :                             :        +- *(15) SortMergeJoin [cs_item_sk#38], [i_item_sk#33], Inner
               :                    :           :                             :                             :           :- *(13) Project [cs_sold_date_sk#26, cs_item_sk#38]
               :                    :           :                             :                             :           :  +- *(13) Filter (isnotnull(cs_item_sk#38) && isnotnull(cs_sold_date_sk#26))
               :                    :           :                             :                             :           :     +- *(13) FileScan Hyperspace(Type: CI, Name: JoinIndex27-index-10-cs_item_sk-22, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#26,cs_item_sk#38] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                             :                             :           +- *(14) Project [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                             :                             :              +- *(14) Filter isnotnull(i_item_sk#33)
               :                    :           :                             :                             :                 +- *(14) FileScan Hyperspace(Type: CI, Name: JoinIndex08-index-2-i_item_sk-17, LogVersion: 0) default.item[i_item_sk#33,i_brand_id#11,i_class_id#12,i_category_id#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                             :                             +- *(18) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
               :                    :           :                             :                                +- ReusedExchange [d_date_sk#20], Exchange hashpartitioning(d_date_sk#20, 5)
               :                    :           :                             +- *(31) Sort [coalesce(i_brand_id#11, 0) ASC NULLS FIRST, coalesce(i_class_id#12, 0) ASC NULLS FIRST, coalesce(i_category_id#13, 0) ASC NULLS FIRST], false, 0
               :                    :           :                                +- Exchange hashpartitioning(coalesce(i_brand_id#11, 0), coalesce(i_class_id#12, 0), coalesce(i_category_id#13, 0), 5)
               :                    :           :                                   +- *(30) Project [i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                                      +- *(30) SortMergeJoin [ws_sold_date_sk#31], [d_date_sk#20], Inner
               :                    :           :                                         :- *(27) Sort [ws_sold_date_sk#31 ASC NULLS FIRST], false, 0
               :                    :           :                                         :  +- Exchange hashpartitioning(ws_sold_date_sk#31, 5)
               :                    :           :                                         :     +- *(26) Project [ws_sold_date_sk#31, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                                         :        +- *(26) SortMergeJoin [ws_item_sk#39], [i_item_sk#33], Inner
               :                    :           :                                         :           :- *(24) Project [ws_sold_date_sk#31, ws_item_sk#39]
               :                    :           :                                         :           :  +- *(24) Filter (isnotnull(ws_item_sk#39) && isnotnull(ws_sold_date_sk#31))
               :                    :           :                                         :           :     +- *(24) FileScan Hyperspace(Type: CI, Name: JoinIndex38-index-15-ws_item_sk-16, LogVersion: 0) default.web_sales[ws_sold_date_sk#31,ws_item_sk#39] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                                         :           +- *(25) Project [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :           :                                         :              +- *(25) Filter isnotnull(i_item_sk#33)
               :                    :           :                                         :                 +- *(25) FileScan Hyperspace(Type: CI, Name: JoinIndex08-index-2-i_item_sk-17, LogVersion: 0) default.item[i_item_sk#33,i_brand_id#11,i_class_id#12,i_category_id#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>, SelectedBucketsCount: 200 out of 200
               :                    :           :                                         +- *(29) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
               :                    :           :                                            +- ReusedExchange [d_date_sk#20], Exchange hashpartitioning(d_date_sk#20, 5)
               :                    :           +- SortMergeJoin [i_item_sk#33], [ss_item_sk#34], LeftSemi
               :                    :              :- *(37) Sort [i_item_sk#33 ASC NULLS FIRST], false, 0
               :                    :              :  +- Exchange hashpartitioning(i_item_sk#33, 5)
               :                    :              :     +- *(36) Project [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :              :        +- *(36) Filter isnotnull(i_item_sk#33)
               :                    :              :           +- *(36) FileScan Hyperspace(Type: CI, Name: JoinIndex08-index-2-i_item_sk-17, LogVersion: 0) default.item[i_item_sk#33,i_brand_id#11,i_class_id#12,i_category_id#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
               :                    :              +- *(70) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
               :                    :                 +- ReusedExchange [ss_item_sk#34], Exchange hashpartitioning(ss_item_sk#34, 5)
               :                    +- *(74) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
               :                       +- Exchange hashpartitioning(d_date_sk#20, 5)
               :                          +- *(73) Project [d_date_sk#20]
               :                             +- *(73) Filter ((((isnotnull(d_year#21) && isnotnull(d_moy#40)) && (d_year#21 = 2001)) && (d_moy#40 = 11)) && isnotnull(d_date_sk#20))
               :                                +- *(73) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21,d_moy#40] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               :- *(152) Project [sales#41, number_sales#42, channel#43, i_brand_id#11, i_class_id#12, i_category_id#13]
               :  +- *(152) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#22 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#24 as decimal(12,2)))), DecimalType(18,2)))#44) && (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#22 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#24 as decimal(12,2)))), DecimalType(18,2)))#44 as decimal(32,6)) > cast(Subquery subquery2812 as decimal(32,6))))
               :     :  +- Subquery subquery2812
               :     :     +- *(11) HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
               :     :        +- Exchange SinglePartition
               :     :           +- *(10) HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
               :     :              +- Union
               :     :                 :- *(3) Project [ss_quantity#14 AS quantity#17, ss_list_price#15 AS list_price#18]
               :     :                 :  +- *(3) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#20], Inner
               :     :                 :     :- *(1) Project [ss_sold_date_sk#19, ss_quantity#14, ss_list_price#15]
               :     :                 :     :  +- *(1) Filter isnotnull(ss_sold_date_sk#19)
               :     :                 :     :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_quantity#14,ss_list_price#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                 :     +- *(2) Project [d_date_sk#20]
               :     :                 :        +- *(2) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                 :           +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     :                 :- *(6) Project [cs_quantity#22 AS quantity#23, cs_list_price#24 AS list_price#25]
               :     :                 :  +- *(6) SortMergeJoin [cs_sold_date_sk#26], [d_date_sk#20], Inner
               :     :                 :     :- *(4) Project [cs_sold_date_sk#26, cs_quantity#22, cs_list_price#24]
               :     :                 :     :  +- *(4) Filter isnotnull(cs_sold_date_sk#26)
               :     :                 :     :     +- *(4) FileScan Hyperspace(Type: CI, Name: JoinIndex26-index-6-cs_sold_date_sk-26, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#26,cs_quantity#22,cs_list_price#24] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                 :     +- *(5) Project [d_date_sk#20]
               :     :                 :        +- *(5) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                 :           +- *(5) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     :                 +- *(9) Project [ws_quantity#27 AS quantity#28, ws_list_price#29 AS list_price#30]
               :     :                    +- *(9) SortMergeJoin [ws_sold_date_sk#31], [d_date_sk#20], Inner
               :     :                       :- *(7) Project [ws_sold_date_sk#31, ws_quantity#27, ws_list_price#29]
               :     :                       :  +- *(7) Filter isnotnull(ws_sold_date_sk#31)
               :     :                       :     +- *(7) FileScan Hyperspace(Type: CI, Name: JoinIndex37-index-9-ws_sold_date_sk-21, LogVersion: 0) default.web_sales[ws_sold_date_sk#31,ws_quantity#27,ws_list_price#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
               :     :                       +- *(8) Project [d_date_sk#20]
               :     :                          +- *(8) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
               :     :                             +- *(8) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
               :     +- *(152) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#22 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#24 as decimal(12,2)))), DecimalType(18,2))), count(1)])
               :        +- Exchange hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5)
               :           +- *(151) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#22 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#24 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)])
               :              +- *(151) Project [cs_quantity#22, cs_list_price#24, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                 +- *(151) SortMergeJoin [cs_sold_date_sk#26], [d_date_sk#20], Inner
               :                    :- *(148) Sort [cs_sold_date_sk#26 ASC NULLS FIRST], false, 0
               :                    :  +- Exchange hashpartitioning(cs_sold_date_sk#26, 5)
               :                    :     +- *(147) Project [cs_sold_date_sk#26, cs_quantity#22, cs_list_price#24, i_brand_id#11, i_class_id#12, i_category_id#13]
               :                    :        +- *(147) SortMergeJoin [cs_item_sk#38], [i_item_sk#33], Inner
               :                    :           :- SortMergeJoin [cs_item_sk#38], [ss_item_sk#34], LeftSemi
               :                    :           :  :- *(78) Sort [cs_item_sk#38 ASC NULLS FIRST], false, 0
               :                    :           :  :  +- Exchange hashpartitioning(cs_item_sk#38, 5)
               :                    :           :  :     +- *(77) Project [cs_sold_date_sk#26, cs_item_sk#38, cs_quantity#22, cs_list_price#24]
               :                    :           :  :        +- *(77) Filter (isnotnull(cs_item_sk#38) && isnotnull(cs_sold_date_sk#26))
               :                    :           :  :           +- *(77) FileScan Hyperspace(Type: CI, Name: JoinIndex26-index-6-cs_sold_date_sk-26, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#26,cs_item_sk#38,cs_quantity#22,cs_list_price#24] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
               :                    :           :  +- *(111) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
               :                    :           :     +- ReusedExchange [ss_item_sk#34], Exchange hashpartitioning(ss_item_sk#34, 5)
               :                    :           +- SortMergeJoin [i_item_sk#33], [ss_item_sk#34], LeftSemi
               :                    :              :- *(113) Sort [i_item_sk#33 ASC NULLS FIRST], false, 0
               :                    :              :  +- ReusedExchange [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13], Exchange hashpartitioning(i_item_sk#33, 5)
               :                    :              +- *(146) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
               :                    :                 +- ReusedExchange [ss_item_sk#34], Exchange hashpartitioning(ss_item_sk#34, 5)
               :                    +- *(150) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
               :                       +- ReusedExchange [d_date_sk#20], Exchange hashpartitioning(d_date_sk#20, 5)
               +- *(228) Project [sales#45, number_sales#46, channel#47, i_brand_id#11, i_class_id#12, i_category_id#13]
                  +- *(228) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#29 as decimal(12,2)))), DecimalType(18,2)))#48) && (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#29 as decimal(12,2)))), DecimalType(18,2)))#48 as decimal(32,6)) > cast(Subquery subquery2817 as decimal(32,6))))
                     :  +- Subquery subquery2817
                     :     +- *(11) HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
                     :        +- Exchange SinglePartition
                     :           +- *(10) HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#17 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#18 as decimal(12,2)))), DecimalType(18,2)))])
                     :              +- Union
                     :                 :- *(3) Project [ss_quantity#14 AS quantity#17, ss_list_price#15 AS list_price#18]
                     :                 :  +- *(3) SortMergeJoin [ss_sold_date_sk#19], [d_date_sk#20], Inner
                     :                 :     :- *(1) Project [ss_sold_date_sk#19, ss_quantity#14, ss_list_price#15]
                     :                 :     :  +- *(1) Filter isnotnull(ss_sold_date_sk#19)
                     :                 :     :     +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex12-index-1-ss_sold_date_sk-21, LogVersion: 0) default.store_sales[ss_sold_date_sk#19,ss_quantity#14,ss_list_price#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
                     :                 :     +- *(2) Project [d_date_sk#20]
                     :                 :        +- *(2) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
                     :                 :           +- *(2) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
                     :                 :- *(6) Project [cs_quantity#22 AS quantity#23, cs_list_price#24 AS list_price#25]
                     :                 :  +- *(6) SortMergeJoin [cs_sold_date_sk#26], [d_date_sk#20], Inner
                     :                 :     :- *(4) Project [cs_sold_date_sk#26, cs_quantity#22, cs_list_price#24]
                     :                 :     :  +- *(4) Filter isnotnull(cs_sold_date_sk#26)
                     :                 :     :     +- *(4) FileScan Hyperspace(Type: CI, Name: JoinIndex26-index-6-cs_sold_date_sk-26, LogVersion: 0) default.catalog_sales[cs_sold_date_sk#26,cs_quantity#22,cs_list_price#24] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
                     :                 :     +- *(5) Project [d_date_sk#20]
                     :                 :        +- *(5) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
                     :                 :           +- *(5) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
                     :                 +- *(9) Project [ws_quantity#27 AS quantity#28, ws_list_price#29 AS list_price#30]
                     :                    +- *(9) SortMergeJoin [ws_sold_date_sk#31], [d_date_sk#20], Inner
                     :                       :- *(7) Project [ws_sold_date_sk#31, ws_quantity#27, ws_list_price#29]
                     :                       :  +- *(7) Filter isnotnull(ws_sold_date_sk#31)
                     :                       :     +- *(7) FileScan Hyperspace(Type: CI, Name: JoinIndex37-index-9-ws_sold_date_sk-21, LogVersion: 0) default.web_sales[ws_sold_date_sk#31,ws_quantity#27,ws_list_price#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>, SelectedBucketsCount: 200 out of 200
                     :                       +- *(8) Project [d_date_sk#20]
                     :                          +- *(8) Filter (((isnotnull(d_year#21) && (d_year#21 >= 1999)) && (d_year#21 <= 2001)) && isnotnull(d_date_sk#20))
                     :                             +- *(8) FileScan Hyperspace(Type: CI, Name: JoinIndex03-index-0-d_date_sk-10, LogVersion: 0) default.date_dim[d_date_sk#20,d_year#21] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>, SelectedBucketsCount: 200 out of 200
                     +- *(228) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#29 as decimal(12,2)))), DecimalType(18,2))), count(1)])
                        +- Exchange hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5)
                           +- *(227) HashAggregate(keys=[i_brand_id#11, i_class_id#12, i_category_id#13], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#29 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)])
                              +- *(227) Project [ws_quantity#27, ws_list_price#29, i_brand_id#11, i_class_id#12, i_category_id#13]
                                 +- *(227) SortMergeJoin [ws_sold_date_sk#31], [d_date_sk#20], Inner
                                    :- *(224) Sort [ws_sold_date_sk#31 ASC NULLS FIRST], false, 0
                                    :  +- Exchange hashpartitioning(ws_sold_date_sk#31, 5)
                                    :     +- *(223) Project [ws_sold_date_sk#31, ws_quantity#27, ws_list_price#29, i_brand_id#11, i_class_id#12, i_category_id#13]
                                    :        +- *(223) SortMergeJoin [ws_item_sk#39], [i_item_sk#33], Inner
                                    :           :- SortMergeJoin [ws_item_sk#39], [ss_item_sk#34], LeftSemi
                                    :           :  :- *(154) Sort [ws_item_sk#39 ASC NULLS FIRST], false, 0
                                    :           :  :  +- Exchange hashpartitioning(ws_item_sk#39, 5)
                                    :           :  :     +- *(153) Project [ws_sold_date_sk#31, ws_item_sk#39, ws_quantity#27, ws_list_price#29]
                                    :           :  :        +- *(153) Filter (isnotnull(ws_item_sk#39) && isnotnull(ws_sold_date_sk#31))
                                    :           :  :           +- *(153) FileScan Hyperspace(Type: CI, Name: JoinIndex37-index-9-ws_sold_date_sk-21, LogVersion: 0) default.web_sales[ws_sold_date_sk#31,ws_item_sk#39,ws_quantity#27,ws_list_price#29] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                    :           :  +- *(187) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
                                    :           :     +- ReusedExchange [ss_item_sk#34], Exchange hashpartitioning(ss_item_sk#34, 5)
                                    :           +- SortMergeJoin [i_item_sk#33], [ss_item_sk#34], LeftSemi
                                    :              :- *(189) Sort [i_item_sk#33 ASC NULLS FIRST], false, 0
                                    :              :  +- ReusedExchange [i_item_sk#33, i_brand_id#11, i_class_id#12, i_category_id#13], Exchange hashpartitioning(i_item_sk#33, 5)
                                    :              +- *(222) Sort [ss_item_sk#34 ASC NULLS FIRST], false, 0
                                    :                 +- ReusedExchange [ss_item_sk#34], Exchange hashpartitioning(ss_item_sk#34, 5)
                                    +- *(226) Sort [d_date_sk#20 ASC NULLS FIRST], false, 0
                                       +- ReusedExchange [d_date_sk#20], Exchange hashpartitioning(d_date_sk#20, 5)