== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#1 ASC NULLS FIRST], output=[c_customer_id#1])
+- *(23) Project [c_customer_id#1]
   +- *(23) SortMergeJoin [ctr_customer_sk#2], [cast(c_customer_sk#3 as bigint)], Inner
      :- *(20) Sort [ctr_customer_sk#2 ASC NULLS FIRST], false, 0
      :  +- Exchange hashpartitioning(ctr_customer_sk#2, 5)
      :     +- *(19) Project [ctr_customer_sk#2]
      :        +- *(19) SortMergeJoin [ctr_store_sk#4], [cast(s_store_sk#5 as bigint)], Inner
      :           :- *(16) Project [ctr_customer_sk#2, ctr_store_sk#4]
      :           :  +- *(16) SortMergeJoin [ctr_store_sk#4], [ctr_store_sk#4#6], Inner, (cast(ctr_total_return#7 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#8)
      :           :     :- *(7) Sort [ctr_store_sk#4 ASC NULLS FIRST], false, 0
      :           :     :  +- Exchange hashpartitioning(ctr_store_sk#4, 5)
      :           :     :     +- *(6) Filter isnotnull(ctr_total_return#7)
      :           :     :        +- *(6) HashAggregate(keys=[sr_customer_sk#9, sr_store_sk#10], functions=[sum(UnscaledValue(sr_return_amt#11))])
      :           :     :           +- Exchange hashpartitioning(sr_customer_sk#9, sr_store_sk#10, 5)
      :           :     :              +- *(5) HashAggregate(keys=[sr_customer_sk#9, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_return_amt#11))])
      :           :     :                 +- *(5) Project [sr_customer_sk#9, sr_store_sk#10, sr_return_amt#11]
      :           :     :                    +- *(5) SortMergeJoin [sr_returned_date_sk#12], [cast(d_date_sk#13 as bigint)], Inner
      :           :     :                       :- *(2) Sort [sr_returned_date_sk#12 ASC NULLS FIRST], false, 0
      :           :     :                       :  +- Exchange hashpartitioning(sr_returned_date_sk#12, 5)
      :           :     :                       :     +- *(1) Project [sr_returned_date_sk#12, sr_customer_sk#9, sr_store_sk#10, sr_return_amt#11]
      :           :     :                       :        +- *(1) Filter ((isnotnull(sr_returned_date_sk#12) && isnotnull(sr_store_sk#10)) && isnotnull(sr_customer_sk#9))
      :           :     :                       :           +- *(1) FileScan Hyperspace(Type: CI, Name: JoinIndex23-index-37-sr_returned_date_sk-7, LogVersion: 0) default.store_returns[sr_returned_date_sk#12,sr_customer_sk#9,sr_store_sk#10,sr_return_amt#11] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(...
      :           :     :                       +- *(4) Sort [cast(d_date_sk#13 as bigint) ASC NULLS FIRST], false, 0
      :           :     :                          +- Exchange hashpartitioning(cast(d_date_sk#13 as bigint), 5)
      :           :     :                             +- *(3) Project [d_date_sk#13]
      :           :     :                                +- *(3) Filter ((isnotnull(d_year#14) && (d_year#14 = 2000)) && isnotnull(d_date_sk#13))
      :           :     :                                   +- *(3) FileScan Hyperspace(Type: CI, Name: FilterIndex04-index-11-d_year-5, LogVersion: 0) default.date_dim[d_date_sk#13,d_year#14] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :           :     +- *(15) Sort [ctr_store_sk#4#6 ASC NULLS FIRST], false, 0
      :           :        +- Exchange hashpartitioning(ctr_store_sk#4#6, 5)
      :           :           +- *(14) Filter isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#8)
      :           :              +- *(14) HashAggregate(keys=[ctr_store_sk#4], functions=[avg(ctr_total_return#7)])
      :           :                 +- Exchange hashpartitioning(ctr_store_sk#4, 5)
      :           :                    +- *(13) HashAggregate(keys=[ctr_store_sk#4], functions=[partial_avg(ctr_total_return#7)])
      :           :                       +- *(13) HashAggregate(keys=[sr_customer_sk#9, sr_store_sk#10], functions=[sum(UnscaledValue(sr_return_amt#11))])
      :           :                          +- Exchange hashpartitioning(sr_customer_sk#9, sr_store_sk#10, 5)
      :           :                             +- *(12) HashAggregate(keys=[sr_customer_sk#9, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_return_amt#11))])
      :           :                                +- *(12) Project [sr_customer_sk#9, sr_store_sk#10, sr_return_amt#11]
      :           :                                   +- *(12) SortMergeJoin [sr_returned_date_sk#12], [cast(d_date_sk#13 as bigint)], Inner
      :           :                                      :- *(9) Sort [sr_returned_date_sk#12 ASC NULLS FIRST], false, 0
      :           :                                      :  +- Exchange hashpartitioning(sr_returned_date_sk#12, 5)
      :           :                                      :     +- *(8) Project [sr_returned_date_sk#12, sr_customer_sk#9, sr_store_sk#10, sr_return_amt#11]
      :           :                                      :        +- *(8) Filter (isnotnull(sr_returned_date_sk#12) && isnotnull(sr_store_sk#10))
      :           :                                      :           +- *(8) FileScan Hyperspace(Type: CI, Name: JoinIndex23-index-37-sr_returned_date_sk-7, LogVersion: 0) default.store_returns[sr_returned_date_sk#12,sr_customer_sk#9,sr_store_sk#10,sr_return_amt#11] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(...
      :           :                                      +- *(11) Sort [cast(d_date_sk#13 as bigint) ASC NULLS FIRST], false, 0
      :           :                                         +- ReusedExchange [d_date_sk#13], Exchange hashpartitioning(cast(d_date_sk#13 as bigint), 5)
      :           +- *(18) Sort [cast(s_store_sk#5 as bigint) ASC NULLS FIRST], false, 0
      :              +- Exchange hashpartitioning(cast(s_store_sk#5 as bigint), 5)
      :                 +- *(17) Project [s_store_sk#5]
      :                    +- *(17) Filter ((isnotnull(s_state#15) && (s_state#15 = TN)) && isnotnull(s_store_sk#5))
      :                       +- *(17) FileScan Hyperspace(Type: CI, Name: JoinIndex24-index-4-s_store_sk-15, LogVersion: 0) default.store[s_store_sk#5,s_state#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
      +- *(22) Sort [cast(c_customer_sk#3 as bigint) ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(cast(c_customer_sk#3 as bigint), 5)
            +- *(21) Project [c_customer_sk#3, c_customer_id#1]
               +- *(21) Filter isnotnull(c_customer_sk#3)
                  +- *(21) FileScan Hyperspace(Type: CI, Name: JoinIndex43-index-8-c_customer_sk-17, LogVersion: 0) default.customer[c_customer_sk#3,c_customer_id#1] Batched: true, Format: Parquet, Location: InMemoryFileIndex[], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>