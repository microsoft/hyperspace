== Physical Plan ==
TakeOrderedAndProject(limit=100, orderBy=[customer_id#1 ASC NULLS FIRST,customer_id#1 ASC NULLS FIRST,customer_id#1 ASC NULLS FIRST], output=[customer_id#1,customer_first_name#2,customer_last_name#3])
+- *(17) Project [customer_id#1, customer_first_name#2, customer_last_name#3]
   +- *(17) BroadcastHashJoin [customer_id#4], [customer_id#5], Inner, BuildRight, (CASE WHEN (year_total#6 > 0.00) THEN CheckOverflow((promote_precision(year_total#7) / promote_precision(year_total#6)), DecimalType(37,20)) ELSE null END > CASE WHEN (year_total#8 > 0.00) THEN CheckOverflow((promote_precision(year_total#9) / promote_precision(year_total#8)), DecimalType(37,20)) ELSE null END)
      :- *(17) Project [customer_id#4, year_total#8, customer_id#1, customer_first_name#2, customer_last_name#3, year_total#9, year_total#6]
      :  +- *(17) BroadcastHashJoin [customer_id#4], [customer_id#10], Inner, BuildRight
      :     :- *(17) BroadcastHashJoin [customer_id#4], [customer_id#1], Inner, BuildRight
      :     :  :- Union
      :     :  :  :- *(4) Filter (isnotnull(year_total#8) && (year_total#8 > 0.00))
      :     :  :  :  +- *(4) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[sum(UnscaledValue(ss_net_paid#15))])
      :     :  :  :     +- Exchange hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14, 200)
      :     :  :  :        +- *(3) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[partial_sum(UnscaledValue(ss_net_paid#15))])
      :     :  :  :           +- *(3) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ss_net_paid#15, d_year#14]
      :     :  :  :              +- *(3) BroadcastHashJoin [ss_sold_date_sk#16], [d_date_sk#17], Inner, BuildRight
      :     :  :  :                 :- *(3) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ss_sold_date_sk#16, ss_net_paid#15]
      :     :  :  :                 :  +- *(3) BroadcastHashJoin [c_customer_sk#18], [ss_customer_sk#19], Inner, BuildRight
      :     :  :  :                 :     :- *(3) Project [c_customer_sk#18, c_customer_id#11, c_first_name#12, c_last_name#13]
      :     :  :  :                 :     :  +- *(3) Filter (isnotnull(c_customer_sk#18) && isnotnull(c_customer_id#11))
      :     :  :  :                 :     :     +- *(3) FileScan parquet default.customer[c_customer_sk#18,c_customer_id#11,c_first_name#12,c_last_name#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
      :     :  :  :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :  :  :                 :        +- *(1) Project [ss_sold_date_sk#16, ss_customer_sk#19, ss_net_paid#15]
      :     :  :  :                 :           +- *(1) Filter (isnotnull(ss_customer_sk#19) && isnotnull(ss_sold_date_sk#16))
      :     :  :  :                 :              +- *(1) FileScan parquet default.store_sales[ss_sold_date_sk#16,ss_customer_sk#19,ss_net_paid#15] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>
      :     :  :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :  :  :                    +- *(2) Project [d_date_sk#17, d_year#14]
      :     :  :  :                       +- *(2) Filter (((isnotnull(d_year#14) && d_year#14 IN (2001,2002)) && (d_year#14 = 2001)) && isnotnull(d_date_sk#17))
      :     :  :  :                          +- *(2) FileScan parquet default.date_dim[d_date_sk#17,d_year#14] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), In(d_year, [2001,2002]), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :  :  +- LocalTableScan <empty>, [customer_id#20, year_total#21]
      :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :     :     +- Union
      :     :        :- *(8) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[sum(UnscaledValue(ss_net_paid#15))])
      :     :        :  +- Exchange hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14, 200)
      :     :        :     +- *(7) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[partial_sum(UnscaledValue(ss_net_paid#15))])
      :     :        :        +- *(7) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ss_net_paid#15, d_year#14]
      :     :        :           +- *(7) BroadcastHashJoin [ss_sold_date_sk#16], [d_date_sk#17], Inner, BuildRight
      :     :        :              :- *(7) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ss_sold_date_sk#16, ss_net_paid#15]
      :     :        :              :  +- *(7) BroadcastHashJoin [c_customer_sk#18], [ss_customer_sk#19], Inner, BuildRight
      :     :        :              :     :- *(7) Project [c_customer_sk#18, c_customer_id#11, c_first_name#12, c_last_name#13]
      :     :        :              :     :  +- *(7) Filter (isnotnull(c_customer_sk#18) && isnotnull(c_customer_id#11))
      :     :        :              :     :     +- *(7) FileScan parquet default.customer[c_customer_sk#18,c_customer_id#11,c_first_name#12,c_last_name#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
      :     :        :              :     +- ReusedExchange [ss_sold_date_sk#16, ss_customer_sk#19, ss_net_paid#15], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :     :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      :     :        :                 +- *(6) Project [d_date_sk#17, d_year#14]
      :     :        :                    +- *(6) Filter (((isnotnull(d_year#14) && d_year#14 IN (2001,2002)) && (d_year#14 = 2002)) && isnotnull(d_date_sk#17))
      :     :        :                       +- *(6) FileScan parquet default.date_dim[d_date_sk#17,d_year#14] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), In(d_year, [2001,2002]), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :     :        +- LocalTableScan <empty>, [customer_id#20, customer_first_name#22, customer_last_name#23, year_total#21]
      :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
      :        +- Union
      :           :- LocalTableScan <empty>, [customer_id#10, year_total#6]
      :           +- *(12) Filter (isnotnull(year_total#21) && (year_total#21 > 0.00))
      :              +- *(12) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[sum(UnscaledValue(ws_net_paid#24))])
      :                 +- Exchange hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14, 200)
      :                    +- *(11) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[partial_sum(UnscaledValue(ws_net_paid#24))])
      :                       +- *(11) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ws_net_paid#24, d_year#14]
      :                          +- *(11) BroadcastHashJoin [ws_sold_date_sk#25], [d_date_sk#17], Inner, BuildRight
      :                             :- *(11) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ws_sold_date_sk#25, ws_net_paid#24]
      :                             :  +- *(11) BroadcastHashJoin [c_customer_sk#18], [ws_bill_customer_sk#26], Inner, BuildRight
      :                             :     :- *(11) Project [c_customer_sk#18, c_customer_id#11, c_first_name#12, c_last_name#13]
      :                             :     :  +- *(11) Filter (isnotnull(c_customer_sk#18) && isnotnull(c_customer_id#11))
      :                             :     :     +- *(11) FileScan parquet default.customer[c_customer_sk#18,c_customer_id#11,c_first_name#12,c_last_name#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
      :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
      :                             :        +- *(9) Project [ws_sold_date_sk#25, ws_bill_customer_sk#26, ws_net_paid#24]
      :                             :           +- *(9) Filter (isnotnull(ws_bill_customer_sk#26) && isnotnull(ws_sold_date_sk#25))
      :                             :              +- *(9) FileScan parquet default.web_sales[ws_sold_date_sk#25,ws_bill_customer_sk#26,ws_net_paid#24] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>
      :                             +- ReusedExchange [d_date_sk#17, d_year#14], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]))
         +- Union
            :- LocalTableScan <empty>, [customer_id#5, year_total#7]
            +- *(16) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[sum(UnscaledValue(ws_net_paid#24))])
               +- Exchange hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14, 200)
                  +- *(15) HashAggregate(keys=[c_customer_id#11, c_first_name#12, c_last_name#13, d_year#14], functions=[partial_sum(UnscaledValue(ws_net_paid#24))])
                     +- *(15) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ws_net_paid#24, d_year#14]
                        +- *(15) BroadcastHashJoin [ws_sold_date_sk#25], [d_date_sk#17], Inner, BuildRight
                           :- *(15) Project [c_customer_id#11, c_first_name#12, c_last_name#13, ws_sold_date_sk#25, ws_net_paid#24]
                           :  +- *(15) BroadcastHashJoin [c_customer_sk#18], [ws_bill_customer_sk#26], Inner, BuildRight
                           :     :- *(15) Project [c_customer_sk#18, c_customer_id#11, c_first_name#12, c_last_name#13]
                           :     :  +- *(15) Filter (isnotnull(c_customer_sk#18) && isnotnull(c_customer_id#11))
                           :     :     +- *(15) FileScan parquet default.customer[c_customer_sk#18,c_customer_id#11,c_first_name#12,c_last_name#13] Batched: true, Format: Parquet, Location: InMemoryFileIndex[file:/C:/Users/apdave/github/hyperspace-1/spark-warehouse/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
                           :     +- ReusedExchange [ws_sold_date_sk#25, ws_bill_customer_sk#26, ws_net_paid#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)))
                           +- ReusedExchange [d_date_sk#17, d_year#14], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))